
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000084a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  000008e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd6  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b07  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8c  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00004274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000767  00000000  00000000  00004600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa1  00000000  00000000  00004d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_1>
   8:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
  8a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
EN_AppMode_t appMode;
EN_LEDColor_t carLEDColor;

void APP_Init(void){
	// Initialize LEDs for cars 
	LED_Init(PORTA, PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	LED_Init(PORTA, PIN1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	LED_Init(PORTA, PIN2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	
	// Initialize LEDs for pedestrians 
	LED_Init(PORTB, PIN0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	LED_Init(PORTB, PIN1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	LED_Init(PORTB, PIN2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LED_Init>
	
	// Initialize Button
	BUTTON_Init(PORTD, PIN2);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <BUTTON_Init>
	
	// Initialize Timer (Normal mode)
	TMR0_InitNormalMode(&timerConfig_5sec);
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a7 03 	call	0x74e	; 0x74e <TMR0_InitNormalMode>
	
	// Initialize INT0 to sense a rising edge 
	EXTI_Init(INT0, RISING_EDGE);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EXTI_Init>
	
	// Initialize the application mode to normal
	appMode = NORMAL;
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
  de:	08 95       	ret

000000e0 <APP_Start>:
}

void APP_Start(void){
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
	switch(appMode){
  e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
  e8:	88 23       	and	r24, r24
  ea:	21 f0       	breq	.+8      	; 0xf4 <APP_Start+0x14>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	09 f4       	brne	.+2      	; 0xf2 <APP_Start+0x12>
  f0:	4c c0       	rjmp	.+152    	; 0x18a <APP_Start+0xaa>
  f2:	af c0       	rjmp	.+350    	; 0x252 <APP_Start+0x172>
		case NORMAL:
			/* 1. Car's green LED on for 5 seconds */
			LED_On(PORTA, PIN2); // turn car's green LED on
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TMR0_Delay>
			LED_Off(PORTA, PIN2); // turn car's green LED off
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 114:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	09 f4       	brne	.+2      	; 0x11e <APP_Start+0x3e>
 11c:	9a c0       	rjmp	.+308    	; 0x252 <APP_Start+0x172>
			
			/* 2. Car's yellow LED blinks for 5 seconds */
			LED_Blink(PORTA, PIN1, &timerConfig_5sec); // blink car's yellow LED for 5 sec
 11e:	40 e6       	ldi	r20, 0x60	; 96
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 84 01 	call	0x308	; 0x308 <LED_Blink>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 13a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	09 f4       	brne	.+2      	; 0x144 <APP_Start+0x64>
 142:	87 c0       	rjmp	.+270    	; 0x252 <APP_Start+0x172>
			
			/* 3. Car's red LED on for 5 seconds */
			LED_On(PORTA, PIN0); // turn car's red LED on
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TMR0_Delay>
			if(NORMAL == appMode) LED_Off(PORTA, PIN0); // turn car's red LED off
 154:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 158:	81 11       	cpse	r24, r1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <APP_Start+0x82>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 162:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f4       	brne	.+2      	; 0x16c <APP_Start+0x8c>
 16a:	73 c0       	rjmp	.+230    	; 0x252 <APP_Start+0x172>
			
			/* 4. Car's yellow LED blinks for 5 seconds */
			LED_Blink(PORTA, PIN1, &timerConfig_5sec); // blink car's yellow LED for 5 sec
 16c:	40 e6       	ldi	r20, 0x60	; 96
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 84 01 	call	0x308	; 0x308 <LED_Blink>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
		break;
 188:	64 c0       	rjmp	.+200    	; 0x252 <APP_Start+0x172>
		
		case PEDESTRIAN:
			if(RED == carLEDColor){
 18a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <carLEDColor>
 18e:	81 11       	cpse	r24, r1
 190:	14 c0       	rjmp	.+40     	; 0x1ba <APP_Start+0xda>
				LED_On(PORTA, PIN0); // turn car's red LED on
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
				TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TMR0_Delay>
				LED_Off(PORTA, PIN0); // turn car's red LED off
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED off
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <APP_Start+0x120>
			}
			else{
				LED_TwoBlink(PORTA, PIN1, PORTB, PIN1, &timerConfig_5sec); // blink car's and pedestrian's yellow LEDs for 5 sec
 1ba:	00 e6       	ldi	r16, 0x60	; 96
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_TwoBlink>
				LED_Off(PORTA, PIN1); // turn car's yellow LED off
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
				LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
				
				LED_On(PORTA, PIN0); // turn car's red LED on
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
				TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 1ea:	c8 01       	movw	r24, r16
 1ec:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TMR0_Delay>
				LED_Off(PORTA, PIN0); // turn car's red LED off
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED off
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			}
			
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			LED_TwoBlink(PORTA, PIN1, PORTB, PIN1, &timerConfig_5sec); // blink car's and pedestrian's yellow LEDs for 5 sec
 208:	00 e6       	ldi	r16, 0x60	; 96
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 b3 01 	call	0x366	; 0x366 <LED_TwoBlink>
			LED_Off(PORTB, PIN2); // turn pedestrian's green LED off
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			
			LED_On(PORTA, PIN2); // turn car's green LED on
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			LED_On(PORTB, PIN0); // turn pedestrian's red LED on
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 240:	c8 01       	movw	r24, r16
 242:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TMR0_Delay>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 80 01 	call	0x300	; 0x300 <LED_Off>
			
			/* Back to normal mode */
			appMode = NORMAL;
 24e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
		break;
	}
}
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <__vector_1>:

ISR(EXTI0){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	// Change the mode to pedestrian when the button is pressed
	appMode = PEDESTRIAN;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <appMode>
	
	// Get the color of car's LED when the button is pressed
	if(LED_IsOn(PORTA, PIN0)) carLEDColor = RED;
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED_IsOn>
 288:	88 23       	and	r24, r24
 28a:	19 f0       	breq	.+6      	; 0x292 <__vector_1+0x3a>
 28c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <carLEDColor>
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__vector_1+0x54>
	else if(LED_IsOn(PORTA, PIN2)) carLEDColor = GREEN;
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED_IsOn>
 29a:	88 23       	and	r24, r24
 29c:	21 f0       	breq	.+8      	; 0x2a6 <__vector_1+0x4e>
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <__vector_1+0x54>
	else carLEDColor = YELLOW;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
	
	if(RED == carLEDColor) LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 2ac:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <carLEDColor>
 2b0:	81 11       	cpse	r24, r1
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <__vector_1+0x66>
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__vector_1+0x6e>
	else LED_On(PORTB, PIN0); // turn pedestrian's red LED on		
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LED_On>
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <BUTTON_Init>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void BUTTON_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
    GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, INPUT);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	0e 94 62 02 	call	0x4c4	; 0x4c4 <GPIO_SetPinDir>
 2ee:	08 95       	ret

000002f0 <LED_Init>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <GPIO_SetPinDir>
 2f6:	08 95       	ret

000002f8 <LED_On>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_On(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <GPIO_SetPinVal>
 2fe:	08 95       	ret

00000300 <LED_Off>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Off(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, LOW);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <GPIO_SetPinVal>
 306:	08 95       	ret

00000308 <LED_Blink>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 *   - config: pointer to timer configuration variable contains (initial value, overflow counts, mode, prescaler.)
 * Return value: void
 */
void LED_Blink(uint8_t LOC_U8Port, uint8_t LOC_U8Pin, ST_TimerConfig_t* config){
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	f8 2e       	mov	r15, r24
 314:	d6 2f       	mov	r29, r22
 316:	8a 01       	movw	r16, r20
	TMR0_Start(config);
 318:	ca 01       	movw	r24, r20
 31a:	0e 94 b2 03 	call	0x764	; 0x764 <TMR0_Start>
	uint8_t overflowCount = 0;
 31e:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 320:	16 c0       	rjmp	.+44     	; 0x34e <LED_Blink+0x46>
		while(!TMR0_GetState());
 322:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TMR0_GetState>
 326:	88 23       	and	r24, r24
 328:	e1 f3       	breq	.-8      	; 0x322 <LED_Blink+0x1a>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 32a:	88 b7       	in	r24, 0x38	; 56
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	88 bf       	out	0x38, r24	; 56
		if(overflowCount%3 == 0) GPIO_ToggPin(LOC_U8Port, LOC_U8Pin); // blink LED
 330:	8b ea       	ldi	r24, 0xAB	; 171
 332:	c8 9f       	mul	r28, r24
 334:	81 2d       	mov	r24, r1
 336:	11 24       	eor	r1, r1
 338:	86 95       	lsr	r24
 33a:	98 2f       	mov	r25, r24
 33c:	99 0f       	add	r25, r25
 33e:	89 0f       	add	r24, r25
 340:	c8 13       	cpse	r28, r24
 342:	04 c0       	rjmp	.+8      	; 0x34c <LED_Blink+0x44>
 344:	6d 2f       	mov	r22, r29
 346:	8f 2d       	mov	r24, r15
 348:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_ToggPin>
		overflowCount++;
 34c:	cf 5f       	subi	r28, 0xFF	; 255
 * Return value: void
 */
void LED_Blink(uint8_t LOC_U8Port, uint8_t LOC_U8Pin, ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 34e:	f8 01       	movw	r30, r16
 350:	81 81       	ldd	r24, Z+1	; 0x01
 352:	c8 17       	cp	r28, r24
 354:	30 f3       	brcs	.-52     	; 0x322 <LED_Blink+0x1a>
		while(!TMR0_GetState());
		SET_BIT(TIFR, TOV0); // clear overflow flag
		if(overflowCount%3 == 0) GPIO_ToggPin(LOC_U8Port, LOC_U8Pin); // blink LED
		overflowCount++;
	}
	TMR0_Stop();
 356:	0e 94 f5 03 	call	0x7ea	; 0x7ea <TMR0_Stop>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	08 95       	ret

00000366 <LED_TwoBlink>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 *   - config: pointer to timer configuration variable contains (initial value, overflow counts, mode, prescaler.)
 * Return value: void
 */
void LED_TwoBlink(uint8_t LOC_U8CarPort, uint8_t LOC_U8CarPin, uint8_t LOC_U8PedPort, uint8_t LOC_U8PedPin, ST_TimerConfig_t* config){
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	d8 2e       	mov	r13, r24
 376:	e6 2e       	mov	r14, r22
 378:	f4 2e       	mov	r15, r20
 37a:	d2 2f       	mov	r29, r18
	TMR0_Start(config);
 37c:	c8 01       	movw	r24, r16
 37e:	0e 94 b2 03 	call	0x764	; 0x764 <TMR0_Start>
	uint8_t overflowCount = 0;
 382:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 384:	1a c0       	rjmp	.+52     	; 0x3ba <LED_TwoBlink+0x54>
		while(!TMR0_GetState());
 386:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TMR0_GetState>
 38a:	88 23       	and	r24, r24
 38c:	e1 f3       	breq	.-8      	; 0x386 <LED_TwoBlink+0x20>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 38e:	88 b7       	in	r24, 0x38	; 56
 390:	81 60       	ori	r24, 0x01	; 1
 392:	88 bf       	out	0x38, r24	; 56
		if(overflowCount%3 == 0){
 394:	8b ea       	ldi	r24, 0xAB	; 171
 396:	c8 9f       	mul	r28, r24
 398:	81 2d       	mov	r24, r1
 39a:	11 24       	eor	r1, r1
 39c:	86 95       	lsr	r24
 39e:	98 2f       	mov	r25, r24
 3a0:	99 0f       	add	r25, r25
 3a2:	89 0f       	add	r24, r25
 3a4:	c8 13       	cpse	r28, r24
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <LED_TwoBlink+0x52>
			GPIO_ToggPin(LOC_U8CarPort, LOC_U8CarPin); // blink LED
 3a8:	6e 2d       	mov	r22, r14
 3aa:	8d 2d       	mov	r24, r13
 3ac:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_ToggPin>
			GPIO_ToggPin(LOC_U8PedPort, LOC_U8PedPin); // blink LED	
 3b0:	6d 2f       	mov	r22, r29
 3b2:	8f 2d       	mov	r24, r15
 3b4:	0e 94 42 03 	call	0x684	; 0x684 <GPIO_ToggPin>
		} 
		overflowCount++;
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 * Return value: void
 */
void LED_TwoBlink(uint8_t LOC_U8CarPort, uint8_t LOC_U8CarPin, uint8_t LOC_U8PedPort, uint8_t LOC_U8PedPin, ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 3ba:	f8 01       	movw	r30, r16
 3bc:	81 81       	ldd	r24, Z+1	; 0x01
 3be:	c8 17       	cp	r28, r24
 3c0:	10 f3       	brcs	.-60     	; 0x386 <LED_TwoBlink+0x20>
			GPIO_ToggPin(LOC_U8CarPort, LOC_U8CarPin); // blink LED
			GPIO_ToggPin(LOC_U8PedPort, LOC_U8PedPin); // blink LED	
		} 
		overflowCount++;
	}
	TMR0_Stop();
 3c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <TMR0_Stop>
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	08 95       	ret

000003d6 <LED_IsOn>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: the value of the LED pin (HIGH or LOW)
 */
uint8_t LED_IsOn(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	return GPIO_GetPinVal(LOC_U8Port, LOC_U8Pin);
 3d6:	0e 94 76 03 	call	0x6ec	; 0x6ec <GPIO_GetPinVal>
 3da:	08 95       	ret

000003dc <main>:

#include "APP/APP_Interface.h"

int main(void)
{
	APP_Init();
 3dc:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
	
	while(1){
		APP_Start();
 3e0:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Start>
 3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <main+0x4>

000003e6 <EXTI_ChooseISC>:
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_ChooseISC(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
    // for INT0
    if(INT0 == LOC_U8INTx){
 3e6:	86 30       	cpi	r24, 0x06	; 6
 3e8:	31 f5       	brne	.+76     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
        switch(LOC_U8INT_SENSE){
 3ea:	62 30       	cpi	r22, 0x02	; 2
 3ec:	f1 f0       	breq	.+60     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3ee:	18 f4       	brcc	.+6      	; 0x3f6 <EXTI_ChooseISC+0x10>
 3f0:	66 23       	and	r22, r22
 3f2:	31 f0       	breq	.+12     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f4:	20 c0       	rjmp	.+64     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3f6:	63 30       	cpi	r22, 0x03	; 3
 3f8:	89 f0       	breq	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fa:	64 30       	cpi	r22, 0x04	; 4
 3fc:	41 f0       	breq	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fe:	1b c0       	rjmp	.+54     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 400:	95 b7       	in	r25, 0x35	; 53
 402:	9e 7f       	andi	r25, 0xFE	; 254
 404:	95 bf       	out	0x35, r25	; 53
 406:	95 b7       	in	r25, 0x35	; 53
 408:	9d 7f       	andi	r25, 0xFD	; 253
 40a:	95 bf       	out	0x35, r25	; 53
 40c:	14 c0       	rjmp	.+40     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 40e:	95 b7       	in	r25, 0x35	; 53
 410:	91 60       	ori	r25, 0x01	; 1
 412:	95 bf       	out	0x35, r25	; 53
 414:	95 b7       	in	r25, 0x35	; 53
 416:	9d 7f       	andi	r25, 0xFD	; 253
 418:	95 bf       	out	0x35, r25	; 53
 41a:	0d c0       	rjmp	.+26     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 41c:	95 b7       	in	r25, 0x35	; 53
 41e:	9e 7f       	andi	r25, 0xFE	; 254
 420:	95 bf       	out	0x35, r25	; 53
 422:	95 b7       	in	r25, 0x35	; 53
 424:	92 60       	ori	r25, 0x02	; 2
 426:	95 bf       	out	0x35, r25	; 53
 428:	06 c0       	rjmp	.+12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 42a:	95 b7       	in	r25, 0x35	; 53
 42c:	91 60       	ori	r25, 0x01	; 1
 42e:	95 bf       	out	0x35, r25	; 53
 430:	95 b7       	in	r25, 0x35	; 53
 432:	92 60       	ori	r25, 0x02	; 2
 434:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT1
    if(INT1 == LOC_U8INTx){
 436:	87 30       	cpi	r24, 0x07	; 7
 438:	31 f5       	brne	.+76     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
        switch(LOC_U8INT_SENSE){
 43a:	62 30       	cpi	r22, 0x02	; 2
 43c:	f1 f0       	breq	.+60     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 43e:	18 f4       	brcc	.+6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 440:	66 23       	and	r22, r22
 442:	31 f0       	breq	.+12     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 444:	20 c0       	rjmp	.+64     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 446:	63 30       	cpi	r22, 0x03	; 3
 448:	89 f0       	breq	.+34     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 44a:	64 30       	cpi	r22, 0x04	; 4
 44c:	41 f0       	breq	.+16     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 44e:	1b c0       	rjmp	.+54     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 450:	95 b7       	in	r25, 0x35	; 53
 452:	9b 7f       	andi	r25, 0xFB	; 251
 454:	95 bf       	out	0x35, r25	; 53
 456:	95 b7       	in	r25, 0x35	; 53
 458:	97 7f       	andi	r25, 0xF7	; 247
 45a:	95 bf       	out	0x35, r25	; 53
 45c:	14 c0       	rjmp	.+40     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 45e:	95 b7       	in	r25, 0x35	; 53
 460:	94 60       	ori	r25, 0x04	; 4
 462:	95 bf       	out	0x35, r25	; 53
 464:	95 b7       	in	r25, 0x35	; 53
 466:	97 7f       	andi	r25, 0xF7	; 247
 468:	95 bf       	out	0x35, r25	; 53
 46a:	0d c0       	rjmp	.+26     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 46c:	95 b7       	in	r25, 0x35	; 53
 46e:	9b 7f       	andi	r25, 0xFB	; 251
 470:	95 bf       	out	0x35, r25	; 53
 472:	95 b7       	in	r25, 0x35	; 53
 474:	98 60       	ori	r25, 0x08	; 8
 476:	95 bf       	out	0x35, r25	; 53
 478:	06 c0       	rjmp	.+12     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 47a:	95 b7       	in	r25, 0x35	; 53
 47c:	94 60       	ori	r25, 0x04	; 4
 47e:	95 bf       	out	0x35, r25	; 53
 480:	95 b7       	in	r25, 0x35	; 53
 482:	98 60       	ori	r25, 0x08	; 8
 484:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT2
    if(INT2 == LOC_U8INTx){
 486:	85 30       	cpi	r24, 0x05	; 5
 488:	59 f4       	brne	.+22     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
        switch(LOC_U8INT_SENSE){
 48a:	62 30       	cpi	r22, 0x02	; 2
 48c:	31 f0       	breq	.+12     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 48e:	63 30       	cpi	r22, 0x03	; 3
 490:	39 f4       	brne	.+14     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
            case(FALLING_EDGE): CLR_BIT(MCUCSR, ISC2); break;
 492:	84 b7       	in	r24, 0x34	; 52
 494:	8f 7b       	andi	r24, 0xBF	; 191
 496:	84 bf       	out	0x34, r24	; 52
 498:	08 95       	ret
            case(RISING_EDGE): SET_BIT(MCUCSR, ISC2); break;
 49a:	84 b7       	in	r24, 0x34	; 52
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	84 bf       	out	0x34, r24	; 52
 4a0:	08 95       	ret

000004a2 <EXTI_Init>:
 * Arguments:
 *   - LOC_U8INTx: the external interrupt number (INT0, INT1, INT2)
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_Init(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
 4a2:	cf 93       	push	r28
 4a4:	c8 2f       	mov	r28, r24
    // Enable global interrupt
    sei(); 
 4a6:	78 94       	sei
    
    // Choose interrupt sense
    EXTI_ChooseISC(LOC_U8INTx, LOC_U8INT_SENSE);
 4a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <EXTI_ChooseISC>

    // Enable external interrupt
    SET_BIT(GICR, LOC_U8INTx);
 4ac:	2b b7       	in	r18, 0x3b	; 59
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <EXTI_Init+0x16>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	ca 95       	dec	r28
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <EXTI_Init+0x12>
 4bc:	82 2b       	or	r24, r18
 4be:	8b bf       	out	0x3b, r24	; 59
}
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <GPIO_SetPinDir>:
void GPIO_SetPortVal(uint8_t LOC_U8Port, uint8_t LOC_U8Value){
	switch(LOC_U8Port){
		case PORTA: PORTA_REG = LOC_U8Value; break;
		case PORTB: PORTB_REG = LOC_U8Value; break;
		case PORTC: PORTC_REG = LOC_U8Value; break;
		case PORTD: PORTD_REG = LOC_U8Value; break;
 4c4:	41 11       	cpse	r20, r1
 4c6:	38 c0       	rjmp	.+112    	; 0x538 <GPIO_SetPinDir+0x74>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 f0       	breq	.+36     	; 0x4f0 <GPIO_SetPinDir+0x2c>
 4cc:	28 f0       	brcs	.+10     	; 0x4d8 <GPIO_SetPinDir+0x14>
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	d9 f0       	breq	.+54     	; 0x508 <GPIO_SetPinDir+0x44>
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	29 f1       	breq	.+74     	; 0x520 <GPIO_SetPinDir+0x5c>
 4d6:	08 95       	ret
 4d8:	2a b3       	in	r18, 0x1a	; 26
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <GPIO_SetPinDir+0x20>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <GPIO_SetPinDir+0x1c>
 4e8:	80 95       	com	r24
 4ea:	82 23       	and	r24, r18
 4ec:	8a bb       	out	0x1a, r24	; 26
 4ee:	08 95       	ret
 4f0:	27 b3       	in	r18, 0x17	; 23
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <GPIO_SetPinDir+0x38>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <GPIO_SetPinDir+0x34>
 500:	80 95       	com	r24
 502:	82 23       	and	r24, r18
 504:	87 bb       	out	0x17, r24	; 23
 506:	08 95       	ret
 508:	24 b3       	in	r18, 0x14	; 20
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_SetPinDir+0x50>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_SetPinDir+0x4c>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	84 bb       	out	0x14, r24	; 20
 51e:	08 95       	ret
 520:	21 b3       	in	r18, 0x11	; 17
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_SetPinDir+0x68>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_SetPinDir+0x64>
 530:	80 95       	com	r24
 532:	82 23       	and	r24, r18
 534:	81 bb       	out	0x11, r24	; 17
 536:	08 95       	ret
 538:	41 30       	cpi	r20, 0x01	; 1
 53a:	99 f5       	brne	.+102    	; 0x5a2 <GPIO_SetPinDir+0xde>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	89 f0       	breq	.+34     	; 0x562 <GPIO_SetPinDir+0x9e>
 540:	28 f0       	brcs	.+10     	; 0x54c <GPIO_SetPinDir+0x88>
 542:	82 30       	cpi	r24, 0x02	; 2
 544:	c9 f0       	breq	.+50     	; 0x578 <GPIO_SetPinDir+0xb4>
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	11 f1       	breq	.+68     	; 0x58e <GPIO_SetPinDir+0xca>
 54a:	08 95       	ret
 54c:	2a b3       	in	r18, 0x1a	; 26
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <GPIO_SetPinDir+0x94>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <GPIO_SetPinDir+0x90>
 55c:	82 2b       	or	r24, r18
 55e:	8a bb       	out	0x1a, r24	; 26
 560:	08 95       	ret
 562:	27 b3       	in	r18, 0x17	; 23
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <GPIO_SetPinDir+0xaa>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <GPIO_SetPinDir+0xa6>
 572:	82 2b       	or	r24, r18
 574:	87 bb       	out	0x17, r24	; 23
 576:	08 95       	ret
 578:	24 b3       	in	r18, 0x14	; 20
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_SetPinDir+0xc0>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_SetPinDir+0xbc>
 588:	82 2b       	or	r24, r18
 58a:	84 bb       	out	0x14, r24	; 20
 58c:	08 95       	ret
 58e:	21 b3       	in	r18, 0x11	; 17
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <GPIO_SetPinDir+0xd6>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <GPIO_SetPinDir+0xd2>
 59e:	82 2b       	or	r24, r18
 5a0:	81 bb       	out	0x11, r24	; 17
 5a2:	08 95       	ret

000005a4 <GPIO_SetPinVal>:
 5a4:	41 11       	cpse	r20, r1
 5a6:	38 c0       	rjmp	.+112    	; 0x618 <GPIO_SetPinVal+0x74>
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 f0       	breq	.+36     	; 0x5d0 <GPIO_SetPinVal+0x2c>
 5ac:	28 f0       	brcs	.+10     	; 0x5b8 <GPIO_SetPinVal+0x14>
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	d9 f0       	breq	.+54     	; 0x5e8 <GPIO_SetPinVal+0x44>
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	29 f1       	breq	.+74     	; 0x600 <GPIO_SetPinVal+0x5c>
 5b6:	08 95       	ret
 5b8:	2b b3       	in	r18, 0x1b	; 27
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <GPIO_SetPinVal+0x20>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <GPIO_SetPinVal+0x1c>
 5c8:	80 95       	com	r24
 5ca:	82 23       	and	r24, r18
 5cc:	8b bb       	out	0x1b, r24	; 27
 5ce:	08 95       	ret
 5d0:	28 b3       	in	r18, 0x18	; 24
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_SetPinVal+0x38>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_SetPinVal+0x34>
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	88 bb       	out	0x18, r24	; 24
 5e6:	08 95       	ret
 5e8:	25 b3       	in	r18, 0x15	; 21
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <GPIO_SetPinVal+0x50>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <GPIO_SetPinVal+0x4c>
 5f8:	80 95       	com	r24
 5fa:	82 23       	and	r24, r18
 5fc:	85 bb       	out	0x15, r24	; 21
 5fe:	08 95       	ret
 600:	22 b3       	in	r18, 0x12	; 18
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <GPIO_SetPinVal+0x68>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <GPIO_SetPinVal+0x64>
 610:	80 95       	com	r24
 612:	82 23       	and	r24, r18
 614:	82 bb       	out	0x12, r24	; 18
 616:	08 95       	ret
 618:	41 30       	cpi	r20, 0x01	; 1
 61a:	99 f5       	brne	.+102    	; 0x682 <GPIO_SetPinVal+0xde>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	89 f0       	breq	.+34     	; 0x642 <GPIO_SetPinVal+0x9e>
 620:	28 f0       	brcs	.+10     	; 0x62c <GPIO_SetPinVal+0x88>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	c9 f0       	breq	.+50     	; 0x658 <GPIO_SetPinVal+0xb4>
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	11 f1       	breq	.+68     	; 0x66e <GPIO_SetPinVal+0xca>
 62a:	08 95       	ret
 62c:	2b b3       	in	r18, 0x1b	; 27
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <GPIO_SetPinVal+0x94>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <GPIO_SetPinVal+0x90>
 63c:	82 2b       	or	r24, r18
 63e:	8b bb       	out	0x1b, r24	; 27
 640:	08 95       	ret
 642:	28 b3       	in	r18, 0x18	; 24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_SetPinVal+0xaa>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_SetPinVal+0xa6>
 652:	82 2b       	or	r24, r18
 654:	88 bb       	out	0x18, r24	; 24
 656:	08 95       	ret
 658:	25 b3       	in	r18, 0x15	; 21
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_SetPinVal+0xc0>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_SetPinVal+0xbc>
 668:	82 2b       	or	r24, r18
 66a:	85 bb       	out	0x15, r24	; 21
 66c:	08 95       	ret
 66e:	22 b3       	in	r18, 0x12	; 18
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <GPIO_SetPinVal+0xd6>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <GPIO_SetPinVal+0xd2>
 67e:	82 2b       	or	r24, r18
 680:	82 bb       	out	0x12, r24	; 18
 682:	08 95       	ret

00000684 <GPIO_ToggPin>:
 *  - uint8_t LOC_U8Port: the port of the pin (PORTA, PORTB, PORTC, or PORTD)
 *  - uint8_t LOC_U8Pin: the number of the pin (0 to 7)
 * Outputs: None
 */
void GPIO_ToggPin(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	switch(LOC_U8Port){
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	89 f0       	breq	.+34     	; 0x6aa <GPIO_ToggPin+0x26>
 688:	28 f0       	brcs	.+10     	; 0x694 <GPIO_ToggPin+0x10>
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	c9 f0       	breq	.+50     	; 0x6c0 <GPIO_ToggPin+0x3c>
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	11 f1       	breq	.+68     	; 0x6d6 <GPIO_ToggPin+0x52>
 692:	08 95       	ret
		case PORTA: TOGG_BIT(PORTA_REG, LOC_U8Pin); break;
 694:	2b b3       	in	r18, 0x1b	; 27
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <GPIO_ToggPin+0x1c>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <GPIO_ToggPin+0x18>
 6a4:	82 27       	eor	r24, r18
 6a6:	8b bb       	out	0x1b, r24	; 27
 6a8:	08 95       	ret
		case PORTB: TOGG_BIT(PORTB_REG, LOC_U8Pin); break;
 6aa:	28 b3       	in	r18, 0x18	; 24
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <GPIO_ToggPin+0x32>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <GPIO_ToggPin+0x2e>
 6ba:	82 27       	eor	r24, r18
 6bc:	88 bb       	out	0x18, r24	; 24
 6be:	08 95       	ret
		case PORTC: TOGG_BIT(PORTC_REG, LOC_U8Pin); break;
 6c0:	25 b3       	in	r18, 0x15	; 21
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <GPIO_ToggPin+0x48>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <GPIO_ToggPin+0x44>
 6d0:	82 27       	eor	r24, r18
 6d2:	85 bb       	out	0x15, r24	; 21
 6d4:	08 95       	ret
		case PORTD: TOGG_BIT(PORTD_REG, LOC_U8Pin); break;
 6d6:	22 b3       	in	r18, 0x12	; 18
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <GPIO_ToggPin+0x5e>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <GPIO_ToggPin+0x5a>
 6e6:	82 27       	eor	r24, r18
 6e8:	82 bb       	out	0x12, r24	; 18
 6ea:	08 95       	ret

000006ec <GPIO_GetPinVal>:
 * Outputs: 
 *  - uint8_t LOC_U8Result: the value of the specified pin 
*/
uint8_t GPIO_GetPinVal(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	uint8_t LOC_U8Result;
	switch(LOC_U8Port){
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	81 f0       	breq	.+32     	; 0x710 <GPIO_GetPinVal+0x24>
 6f0:	28 f0       	brcs	.+10     	; 0x6fc <GPIO_GetPinVal+0x10>
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	b9 f0       	breq	.+46     	; 0x724 <GPIO_GetPinVal+0x38>
 6f6:	83 30       	cpi	r24, 0x03	; 3
 6f8:	f9 f0       	breq	.+62     	; 0x738 <GPIO_GetPinVal+0x4c>
 6fa:	27 c0       	rjmp	.+78     	; 0x74a <GPIO_GetPinVal+0x5e>
		case PORTA: LOC_U8Result = GET_BIT(PORTA_REG, LOC_U8Pin); break;
 6fc:	8b b3       	in	r24, 0x1b	; 27
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <GPIO_GetPinVal+0x1a>
 702:	95 95       	asr	r25
 704:	87 95       	ror	r24
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <GPIO_GetPinVal+0x16>
 70a:	98 2f       	mov	r25, r24
 70c:	91 70       	andi	r25, 0x01	; 1
 70e:	1d c0       	rjmp	.+58     	; 0x74a <GPIO_GetPinVal+0x5e>
		case PORTB: LOC_U8Result = GET_BIT(PORTB_REG, LOC_U8Pin); break;
 710:	88 b3       	in	r24, 0x18	; 24
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <GPIO_GetPinVal+0x2e>
 716:	95 95       	asr	r25
 718:	87 95       	ror	r24
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <GPIO_GetPinVal+0x2a>
 71e:	98 2f       	mov	r25, r24
 720:	91 70       	andi	r25, 0x01	; 1
 722:	13 c0       	rjmp	.+38     	; 0x74a <GPIO_GetPinVal+0x5e>
		case PORTC: LOC_U8Result = GET_BIT(PORTC_REG, LOC_U8Pin); break;
 724:	85 b3       	in	r24, 0x15	; 21
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <GPIO_GetPinVal+0x42>
 72a:	95 95       	asr	r25
 72c:	87 95       	ror	r24
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <GPIO_GetPinVal+0x3e>
 732:	98 2f       	mov	r25, r24
 734:	91 70       	andi	r25, 0x01	; 1
 736:	09 c0       	rjmp	.+18     	; 0x74a <GPIO_GetPinVal+0x5e>
		case PORTD: LOC_U8Result = GET_BIT(PORTD_REG, LOC_U8Pin); break;
 738:	82 b3       	in	r24, 0x12	; 18
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <GPIO_GetPinVal+0x56>
 73e:	95 95       	asr	r25
 740:	87 95       	ror	r24
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <GPIO_GetPinVal+0x52>
 746:	98 2f       	mov	r25, r24
 748:	91 70       	andi	r25, 0x01	; 1
	}
	return LOC_U8Result;
 74a:	89 2f       	mov	r24, r25
 74c:	08 95       	ret

0000074e <TMR0_InitNormalMode>:
 * overflow number, mode and prescaler.
 * The function sets the waveform generation mode bits in TCCR0 register according to the mode in the config struct.
 * Returns: void
 */
void TMR0_InitNormalMode(ST_TimerConfig_t* config){
    switch(config->mode){
 74e:	fc 01       	movw	r30, r24
 750:	82 81       	ldd	r24, Z+2	; 0x02
 752:	81 11       	cpse	r24, r1
 754:	06 c0       	rjmp	.+12     	; 0x762 <TMR0_InitNormalMode+0x14>
		case TMR_NORMAL:
			CLR_BIT(TCCR0, WGM00);
 756:	83 b7       	in	r24, 0x33	; 51
 758:	8f 7b       	andi	r24, 0xBF	; 191
 75a:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0, WGM01);
 75c:	83 b7       	in	r24, 0x33	; 51
 75e:	87 7f       	andi	r24, 0xF7	; 247
 760:	83 bf       	out	0x33, r24	; 51
 762:	08 95       	ret

00000764 <TMR0_Start>:
 * overflow number, mode and prescaler.
 * The function sets the initial value of TCNT0, and the prescaler bits in TCCR0 register according to the prescaler in the config struct.
 * Returns: void
 */
void TMR0_Start(ST_TimerConfig_t* config){
	TCNT0 = config->initVal;
 764:	fc 01       	movw	r30, r24
 766:	20 81       	ld	r18, Z
 768:	22 bf       	out	0x32, r18	; 50
    switch(config->prescaler){
 76a:	83 81       	ldd	r24, Z+3	; 0x03
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	f9 f0       	breq	.+62     	; 0x7ae <TMR0_Start+0x4a>
 770:	28 f4       	brcc	.+10     	; 0x77c <TMR0_Start+0x18>
 772:	88 23       	and	r24, r24
 774:	41 f0       	breq	.+16     	; 0x786 <TMR0_Start+0x22>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	81 f0       	breq	.+32     	; 0x79a <TMR0_Start+0x36>
 77a:	08 95       	ret
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	09 f1       	breq	.+66     	; 0x7c2 <TMR0_Start+0x5e>
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	49 f1       	breq	.+82     	; 0x7d6 <TMR0_Start+0x72>
 784:	08 95       	ret
        case TMR0_NO_PRE: 
            SET_BIT(TCCR0, CS00);
 786:	83 b7       	in	r24, 0x33	; 51
 788:	81 60       	ori	r24, 0x01	; 1
 78a:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 78c:	83 b7       	in	r24, 0x33	; 51
 78e:	8d 7f       	andi	r24, 0xFD	; 253
 790:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 792:	83 b7       	in	r24, 0x33	; 51
 794:	8b 7f       	andi	r24, 0xFB	; 251
 796:	83 bf       	out	0x33, r24	; 51
            break;
 798:	08 95       	ret

        case TMR0_PRE_8: 
            CLR_BIT(TCCR0, CS00);
 79a:	83 b7       	in	r24, 0x33	; 51
 79c:	8e 7f       	andi	r24, 0xFE	; 254
 79e:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 7a0:	83 b7       	in	r24, 0x33	; 51
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 7a6:	83 b7       	in	r24, 0x33	; 51
 7a8:	8b 7f       	andi	r24, 0xFB	; 251
 7aa:	83 bf       	out	0x33, r24	; 51
            break;
 7ac:	08 95       	ret

        case TMR0_PRE_64: 
            SET_BIT(TCCR0, CS00);
 7ae:	83 b7       	in	r24, 0x33	; 51
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 7b4:	83 b7       	in	r24, 0x33	; 51
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 7ba:	83 b7       	in	r24, 0x33	; 51
 7bc:	8b 7f       	andi	r24, 0xFB	; 251
 7be:	83 bf       	out	0x33, r24	; 51
            break;
 7c0:	08 95       	ret

        case TMR0_PRE_256: 
            CLR_BIT(TCCR0, CS00);
 7c2:	83 b7       	in	r24, 0x33	; 51
 7c4:	8e 7f       	andi	r24, 0xFE	; 254
 7c6:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 7c8:	83 b7       	in	r24, 0x33	; 51
 7ca:	8d 7f       	andi	r24, 0xFD	; 253
 7cc:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	84 60       	ori	r24, 0x04	; 4
 7d2:	83 bf       	out	0x33, r24	; 51
            break;
 7d4:	08 95       	ret

        case TMR0_PRE_1024: 
            SET_BIT(TCCR0, CS00);
 7d6:	83 b7       	in	r24, 0x33	; 51
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 7dc:	83 b7       	in	r24, 0x33	; 51
 7de:	8d 7f       	andi	r24, 0xFD	; 253
 7e0:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 7e2:	83 b7       	in	r24, 0x33	; 51
 7e4:	84 60       	ori	r24, 0x04	; 4
 7e6:	83 bf       	out	0x33, r24	; 51
 7e8:	08 95       	ret

000007ea <TMR0_Stop>:
 * Description: This function is responsible for stopping the Timer0 module.
 * It sets all the bits in the TCCR0 register to 0, effectively stopping the timer.
 * Returns: void
 */
void TMR0_Stop(void){
	TCCR0 = 0x00; // stop TIMER0
 7ea:	13 be       	out	0x33, r1	; 51
 7ec:	08 95       	ret

000007ee <TMR0_GetState>:
 *Description: This function is responsible for getting the state of the Timer0 overflow flag.
 *It reads the TOV0 bit in the TIFR register and returns its value.
 *Returns: uint8_t (1 if overflow occurred, 0 if no overflow)
 */
uint8_t TMR0_GetState(void){
    return GET_BIT(TIFR,TOV0);
 7ee:	88 b7       	in	r24, 0x38	; 56
}
 7f0:	81 70       	andi	r24, 0x01	; 1
 7f2:	08 95       	ret

000007f4 <TMR0_Delay>:
 * The function starts the timer and waits for the number of overflows specified in the config struct.
 * After each overflow, it clears the overflow flag.
 * It stops the timer after the specified number of overflows.
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	8c 01       	movw	r16, r24
	TMR0_Start(config);
 7fc:	0e 94 b2 03 	call	0x764	; 0x764 <TMR0_Start>
	uint8_t overflowCount = 0;
 800:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 802:	08 c0       	rjmp	.+16     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		while(!TMR0_GetState());
 804:	0e 94 f7 03 	call	0x7ee	; 0x7ee <TMR0_GetState>
 808:	88 23       	and	r24, r24
 80a:	e1 f3       	breq	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 80c:	88 b7       	in	r24, 0x38	; 56
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	88 bf       	out	0x38, r24	; 56
		overflowCount++;
 812:	cf 5f       	subi	r28, 0xFF	; 255
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 814:	f8 01       	movw	r30, r16
 816:	81 81       	ldd	r24, Z+1	; 0x01
 818:	c8 17       	cp	r28, r24
 81a:	a0 f3       	brcs	.-24     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		while(!TMR0_GetState());
		SET_BIT(TIFR, TOV0); // clear overflow flag
		overflowCount++;
	}
	TMR0_Stop();
 81c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <TMR0_Stop>
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	08 95       	ret

00000828 <__vector_2>:
		TMR0_Delay(&timerConfig_5sec);
		flag = 0;
	}
}

ISR(EXTI1){
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	8f 93       	push	r24
	flag = 1;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 83a:	8f 91       	pop	r24
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
