
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000860  000008f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  000008f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d68  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b08  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dee  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00004174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  000044d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f0  00000000  00000000  00004c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_1>
   8:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  8a:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
EN_AppMode_t appMode;
EN_LEDColor_t carLEDColor;

void APP_Init(void){
	// Initialize LEDs for cars 
	LED_Init(PORTA, PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	LED_Init(PORTA, PIN1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	LED_Init(PORTA, PIN2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	
	// Initialize LEDs for pedestrians 
	LED_Init(PORTB, PIN0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	LED_Init(PORTB, PIN1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	LED_Init(PORTB, PIN2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 83 01 	call	0x306	; 0x306 <LED_Init>
	
	// Initialize Button
	BUTTON_Init(PORTD, PIN2);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <BUTTON_Init>
	
	// Initialize Timer (Normal mode)
	TMR0_InitNormalMode(&timerConfig_5sec);
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 b2 03 	call	0x764	; 0x764 <TMR0_InitNormalMode>
	
	// Initialize INT0 to sense a rising edge 
	EXTI_Init(INT0, RISING_EDGE);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <EXTI_Init>
	
	// Initialize the application mode to normal
	appMode = NORMAL;
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
  de:	08 95       	ret

000000e0 <APP_Start>:
}

void APP_Start(void){
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
	switch(appMode){
  e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
  e8:	88 23       	and	r24, r24
  ea:	19 f0       	breq	.+6      	; 0xf2 <APP_Start+0x12>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	e9 f1       	breq	.+122    	; 0x16a <APP_Start+0x8a>
  f0:	c8 c0       	rjmp	.+400    	; 0x282 <APP_Start+0x1a2>
		case NORMAL:
			/* 1. Car's green LED on for 5 seconds */
			LED_On(PORTA, PIN2); // turn car's green LED on
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
			LED_Off(PORTA, PIN2); // turn car's green LED off
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 10a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f4       	brne	.+2      	; 0x114 <APP_Start+0x34>
 112:	b7 c0       	rjmp	.+366    	; 0x282 <APP_Start+0x1a2>
			
			/* 2. Car's yellow LED blinks for 5 seconds */
			LED_Blink(PORTA, PIN1, &timerConfig_5sec); // blink car's yellow LED for 5 sec
 114:	40 e6       	ldi	r20, 0x60	; 96
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 8f 01 	call	0x31e	; 0x31e <LED_Blink>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 128:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	09 f4       	brne	.+2      	; 0x132 <APP_Start+0x52>
 130:	a8 c0       	rjmp	.+336    	; 0x282 <APP_Start+0x1a2>
			
			/* 3. Car's red LED on for 5 seconds */
			LED_On(PORTA, PIN0); // turn car's red LED on
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 13a:	80 e6       	ldi	r24, 0x60	; 96
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
			LED_Off(PORTA, PIN0); // turn car's red LED off
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 14a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f4       	brne	.+2      	; 0x154 <APP_Start+0x74>
 152:	97 c0       	rjmp	.+302    	; 0x282 <APP_Start+0x1a2>
			
			/* 4. Car's yellow LED blinks for 5 seconds */
			LED_Blink(PORTA, PIN1, &timerConfig_5sec); // blink car's yellow LED for 5 sec
 154:	40 e6       	ldi	r20, 0x60	; 96
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 8f 01 	call	0x31e	; 0x31e <LED_Blink>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
		break;
 168:	8c c0       	rjmp	.+280    	; 0x282 <APP_Start+0x1a2>
		
		case PEDESTRIAN:
			if(RED == carLEDColor){
 16a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <carLEDColor>
 16e:	81 11       	cpse	r24, r1
 170:	14 c0       	rjmp	.+40     	; 0x19a <APP_Start+0xba>
				LED_On(PORTA, PIN0); // turn car's red LED on
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
				TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
				LED_Off(PORTA, PIN0); // turn car's red LED off
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED off
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
 198:	4b c0       	rjmp	.+150    	; 0x230 <APP_Start+0x150>
			}else{
				if(YELLOW == carLEDColor){
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 f4       	brne	.+36     	; 0x1c2 <APP_Start+0xe2>
					LED_On(PORTB, PIN0); // turn pedestrian's red LED on
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
					LED_Blink(PORTA, PIN1, &timerConfig_5sec); // blink car's yellow LED for 5 sec
 1a4:	40 e6       	ldi	r20, 0x60	; 96
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 8f 01 	call	0x31e	; 0x31e <LED_Blink>
					LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
					LED_Off(PORTA, PIN1); // turn car's yellow LED off
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <APP_Start+0x10a>
				}else{
					LED_On(PORTA, PIN2); // turn car's green LED on
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
					LED_On(PORTB, PIN0); // turn pedestrian's red LED on
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
					TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 1d2:	80 e6       	ldi	r24, 0x60	; 96
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
					LED_Off(PORTA, PIN2); // turn car's green LED off
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
					LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
				}
			
				LED_TwoBlink(PORTA, PIN1, PORTB, PIN1, &timerConfig_5sec); // blink car's and pedestrian's yellow LEDs for 5 sec
 1ea:	00 e6       	ldi	r16, 0x60	; 96
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 be 01 	call	0x37c	; 0x37c <LED_TwoBlink>
				LED_Off(PORTA, PIN1); // turn car's yellow LED off
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
				LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
				
				LED_On(PORTA, PIN0); // turn car's red LED on
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
				TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 21a:	c8 01       	movw	r24, r16
 21c:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
				LED_Off(PORTA, PIN0); // turn car's red LED off
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
				LED_On(PORTB, PIN2); // turn pedestrian's green LED off
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			}
			
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			LED_TwoBlink(PORTA, PIN1, PORTB, PIN1, &timerConfig_5sec); // blink car's and pedestrian's yellow LEDs for 5 sec
 238:	00 e6       	ldi	r16, 0x60	; 96
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 be 01 	call	0x37c	; 0x37c <LED_TwoBlink>
			LED_Off(PORTB, PIN2); // turn pedestrian's green LED off
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			
			LED_On(PORTA, PIN2); // turn car's green LED on
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			LED_On(PORTB, PIN0); // turn pedestrian's red LED on
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 87 01 	call	0x30e	; 0x30e <LED_On>
			TMR0_Delay(&timerConfig_5sec); // delay 5 seconds
 270:	c8 01       	movw	r24, r16
 272:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_Delay>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 8b 01 	call	0x316	; 0x316 <LED_Off>
			
			/* Back to normal mode */
			appMode = NORMAL;
 27e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
			break;
	}
}
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <__vector_1>:

ISR(EXTI0){
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	// Change the mode to pedestrian when the button is pressed
	appMode = PEDESTRIAN;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <appMode>
	
	// Get the color of car's LED when the button is pressed
	if(LED_IsOn(PORTA, PIN0)) carLEDColor = RED;
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_IsOn>
 2b8:	88 23       	and	r24, r24
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <__vector_1+0x3a>
 2bc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <carLEDColor>
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <__vector_1+0x54>
	else if(LED_IsOn(PORTA, PIN2)) carLEDColor = GREEN;
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_IsOn>
 2ca:	88 23       	and	r24, r24
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <__vector_1+0x4e>
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <__vector_1+0x54>
	else carLEDColor = YELLOW;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <BUTTON_Init>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void BUTTON_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
    GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, INPUT);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	0e 94 6d 02 	call	0x4da	; 0x4da <GPIO_SetPinDir>
 304:	08 95       	ret

00000306 <LED_Init>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, OUTPUT);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	0e 94 6d 02 	call	0x4da	; 0x4da <GPIO_SetPinDir>
 30c:	08 95       	ret

0000030e <LED_On>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_On(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, HIGH);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	0e 94 dd 02 	call	0x5ba	; 0x5ba <GPIO_SetPinVal>
 314:	08 95       	ret

00000316 <LED_Off>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Off(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	0e 94 dd 02 	call	0x5ba	; 0x5ba <GPIO_SetPinVal>
 31c:	08 95       	ret

0000031e <LED_Blink>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 *   - config: pointer to timer configuration variable contains (initial value, overflow counts, mode, prescaler.)
 * Return value: void
 */
void LED_Blink(uint8_t LOC_U8Port, uint8_t LOC_U8Pin, ST_TimerConfig_t* config){
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	f8 2e       	mov	r15, r24
 32a:	d6 2f       	mov	r29, r22
 32c:	8a 01       	movw	r16, r20
	TMR0_Start(config);
 32e:	ca 01       	movw	r24, r20
 330:	0e 94 bd 03 	call	0x77a	; 0x77a <TMR0_Start>
	uint8_t overflowCount = 0;
 334:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 336:	16 c0       	rjmp	.+44     	; 0x364 <LED_Blink+0x46>
		while(!TMR0_GetState());
 338:	0e 94 02 04 	call	0x804	; 0x804 <TMR0_GetState>
 33c:	88 23       	and	r24, r24
 33e:	e1 f3       	breq	.-8      	; 0x338 <LED_Blink+0x1a>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 340:	88 b7       	in	r24, 0x38	; 56
 342:	81 60       	ori	r24, 0x01	; 1
 344:	88 bf       	out	0x38, r24	; 56
		if(overflowCount%3 == 0) GPIO_ToggPin(LOC_U8Port, LOC_U8Pin); // blink LED
 346:	8b ea       	ldi	r24, 0xAB	; 171
 348:	c8 9f       	mul	r28, r24
 34a:	81 2d       	mov	r24, r1
 34c:	11 24       	eor	r1, r1
 34e:	86 95       	lsr	r24
 350:	98 2f       	mov	r25, r24
 352:	99 0f       	add	r25, r25
 354:	89 0f       	add	r24, r25
 356:	c8 13       	cpse	r28, r24
 358:	04 c0       	rjmp	.+8      	; 0x362 <LED_Blink+0x44>
 35a:	6d 2f       	mov	r22, r29
 35c:	8f 2d       	mov	r24, r15
 35e:	0e 94 4d 03 	call	0x69a	; 0x69a <GPIO_ToggPin>
		overflowCount++;
 362:	cf 5f       	subi	r28, 0xFF	; 255
 * Return value: void
 */
void LED_Blink(uint8_t LOC_U8Port, uint8_t LOC_U8Pin, ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 364:	f8 01       	movw	r30, r16
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	c8 17       	cp	r28, r24
 36a:	30 f3       	brcs	.-52     	; 0x338 <LED_Blink+0x1a>
		while(!TMR0_GetState());
		SET_BIT(TIFR, TOV0); // clear overflow flag
		if(overflowCount%3 == 0) GPIO_ToggPin(LOC_U8Port, LOC_U8Pin); // blink LED
		overflowCount++;
	}
	TMR0_Stop();
 36c:	0e 94 00 04 	call	0x800	; 0x800 <TMR0_Stop>
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	08 95       	ret

0000037c <LED_TwoBlink>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 *   - config: pointer to timer configuration variable contains (initial value, overflow counts, mode, prescaler.)
 * Return value: void
 */
void LED_TwoBlink(uint8_t LOC_U8CarPort, uint8_t LOC_U8CarPin, uint8_t LOC_U8PedPort, uint8_t LOC_U8PedPin, ST_TimerConfig_t* config){
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	d8 2e       	mov	r13, r24
 38c:	e6 2e       	mov	r14, r22
 38e:	f4 2e       	mov	r15, r20
 390:	d2 2f       	mov	r29, r18
	TMR0_Start(config);
 392:	c8 01       	movw	r24, r16
 394:	0e 94 bd 03 	call	0x77a	; 0x77a <TMR0_Start>
	uint8_t overflowCount = 0;
 398:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 39a:	1a c0       	rjmp	.+52     	; 0x3d0 <LED_TwoBlink+0x54>
		while(!TMR0_GetState());
 39c:	0e 94 02 04 	call	0x804	; 0x804 <TMR0_GetState>
 3a0:	88 23       	and	r24, r24
 3a2:	e1 f3       	breq	.-8      	; 0x39c <LED_TwoBlink+0x20>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 3a4:	88 b7       	in	r24, 0x38	; 56
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	88 bf       	out	0x38, r24	; 56
		if(overflowCount%3 == 0){
 3aa:	8b ea       	ldi	r24, 0xAB	; 171
 3ac:	c8 9f       	mul	r28, r24
 3ae:	81 2d       	mov	r24, r1
 3b0:	11 24       	eor	r1, r1
 3b2:	86 95       	lsr	r24
 3b4:	98 2f       	mov	r25, r24
 3b6:	99 0f       	add	r25, r25
 3b8:	89 0f       	add	r24, r25
 3ba:	c8 13       	cpse	r28, r24
 3bc:	08 c0       	rjmp	.+16     	; 0x3ce <LED_TwoBlink+0x52>
			GPIO_ToggPin(LOC_U8CarPort, LOC_U8CarPin); // blink LED
 3be:	6e 2d       	mov	r22, r14
 3c0:	8d 2d       	mov	r24, r13
 3c2:	0e 94 4d 03 	call	0x69a	; 0x69a <GPIO_ToggPin>
			GPIO_ToggPin(LOC_U8PedPort, LOC_U8PedPin); // blink LED	
 3c6:	6d 2f       	mov	r22, r29
 3c8:	8f 2d       	mov	r24, r15
 3ca:	0e 94 4d 03 	call	0x69a	; 0x69a <GPIO_ToggPin>
		} 
		overflowCount++;
 3ce:	cf 5f       	subi	r28, 0xFF	; 255
 * Return value: void
 */
void LED_TwoBlink(uint8_t LOC_U8CarPort, uint8_t LOC_U8CarPin, uint8_t LOC_U8PedPort, uint8_t LOC_U8PedPin, ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 3d0:	f8 01       	movw	r30, r16
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	c8 17       	cp	r28, r24
 3d6:	10 f3       	brcs	.-60     	; 0x39c <LED_TwoBlink+0x20>
			GPIO_ToggPin(LOC_U8CarPort, LOC_U8CarPin); // blink LED
			GPIO_ToggPin(LOC_U8PedPort, LOC_U8PedPin); // blink LED	
		} 
		overflowCount++;
	}
	TMR0_Stop();
 3d8:	0e 94 00 04 	call	0x800	; 0x800 <TMR0_Stop>
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	08 95       	ret

000003ec <LED_IsOn>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: the value of the LED pin (HIGH or LOW)
 */
uint8_t LED_IsOn(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	return GPIO_GetPinVal(LOC_U8Port, LOC_U8Pin);
 3ec:	0e 94 81 03 	call	0x702	; 0x702 <GPIO_GetPinVal>
 3f0:	08 95       	ret

000003f2 <main>:

#include "APP/APP_Interface.h"

int main(void)
{
	APP_Init();
 3f2:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
	
    while (1) 
    {
		APP_Start();	
 3f6:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Start>
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <main+0x4>

000003fc <EXTI_ChooseISC>:
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_ChooseISC(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
    // for INT0
    if(INT0 == LOC_U8INTx){
 3fc:	86 30       	cpi	r24, 0x06	; 6
 3fe:	31 f5       	brne	.+76     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
        switch(LOC_U8INT_SENSE){
 400:	62 30       	cpi	r22, 0x02	; 2
 402:	f1 f0       	breq	.+60     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 404:	18 f4       	brcc	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 406:	66 23       	and	r22, r22
 408:	31 f0       	breq	.+12     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40a:	20 c0       	rjmp	.+64     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 40c:	63 30       	cpi	r22, 0x03	; 3
 40e:	89 f0       	breq	.+34     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 410:	64 30       	cpi	r22, 0x04	; 4
 412:	41 f0       	breq	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 414:	1b c0       	rjmp	.+54     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 416:	95 b7       	in	r25, 0x35	; 53
 418:	9e 7f       	andi	r25, 0xFE	; 254
 41a:	95 bf       	out	0x35, r25	; 53
 41c:	95 b7       	in	r25, 0x35	; 53
 41e:	9d 7f       	andi	r25, 0xFD	; 253
 420:	95 bf       	out	0x35, r25	; 53
 422:	14 c0       	rjmp	.+40     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 424:	95 b7       	in	r25, 0x35	; 53
 426:	91 60       	ori	r25, 0x01	; 1
 428:	95 bf       	out	0x35, r25	; 53
 42a:	95 b7       	in	r25, 0x35	; 53
 42c:	9d 7f       	andi	r25, 0xFD	; 253
 42e:	95 bf       	out	0x35, r25	; 53
 430:	0d c0       	rjmp	.+26     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 432:	95 b7       	in	r25, 0x35	; 53
 434:	9e 7f       	andi	r25, 0xFE	; 254
 436:	95 bf       	out	0x35, r25	; 53
 438:	95 b7       	in	r25, 0x35	; 53
 43a:	92 60       	ori	r25, 0x02	; 2
 43c:	95 bf       	out	0x35, r25	; 53
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 440:	95 b7       	in	r25, 0x35	; 53
 442:	91 60       	ori	r25, 0x01	; 1
 444:	95 bf       	out	0x35, r25	; 53
 446:	95 b7       	in	r25, 0x35	; 53
 448:	92 60       	ori	r25, 0x02	; 2
 44a:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT1
    if(INT1 == LOC_U8INTx){
 44c:	87 30       	cpi	r24, 0x07	; 7
 44e:	31 f5       	brne	.+76     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
        switch(LOC_U8INT_SENSE){
 450:	62 30       	cpi	r22, 0x02	; 2
 452:	f1 f0       	breq	.+60     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 454:	18 f4       	brcc	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 456:	66 23       	and	r22, r22
 458:	31 f0       	breq	.+12     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 45a:	20 c0       	rjmp	.+64     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 45c:	63 30       	cpi	r22, 0x03	; 3
 45e:	89 f0       	breq	.+34     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 460:	64 30       	cpi	r22, 0x04	; 4
 462:	41 f0       	breq	.+16     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 464:	1b c0       	rjmp	.+54     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 466:	95 b7       	in	r25, 0x35	; 53
 468:	9b 7f       	andi	r25, 0xFB	; 251
 46a:	95 bf       	out	0x35, r25	; 53
 46c:	95 b7       	in	r25, 0x35	; 53
 46e:	97 7f       	andi	r25, 0xF7	; 247
 470:	95 bf       	out	0x35, r25	; 53
 472:	14 c0       	rjmp	.+40     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 474:	95 b7       	in	r25, 0x35	; 53
 476:	94 60       	ori	r25, 0x04	; 4
 478:	95 bf       	out	0x35, r25	; 53
 47a:	95 b7       	in	r25, 0x35	; 53
 47c:	97 7f       	andi	r25, 0xF7	; 247
 47e:	95 bf       	out	0x35, r25	; 53
 480:	0d c0       	rjmp	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 482:	95 b7       	in	r25, 0x35	; 53
 484:	9b 7f       	andi	r25, 0xFB	; 251
 486:	95 bf       	out	0x35, r25	; 53
 488:	95 b7       	in	r25, 0x35	; 53
 48a:	98 60       	ori	r25, 0x08	; 8
 48c:	95 bf       	out	0x35, r25	; 53
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 490:	95 b7       	in	r25, 0x35	; 53
 492:	94 60       	ori	r25, 0x04	; 4
 494:	95 bf       	out	0x35, r25	; 53
 496:	95 b7       	in	r25, 0x35	; 53
 498:	98 60       	ori	r25, 0x08	; 8
 49a:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT2
    if(INT2 == LOC_U8INTx){
 49c:	85 30       	cpi	r24, 0x05	; 5
 49e:	59 f4       	brne	.+22     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
        switch(LOC_U8INT_SENSE){
 4a0:	62 30       	cpi	r22, 0x02	; 2
 4a2:	31 f0       	breq	.+12     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4a4:	63 30       	cpi	r22, 0x03	; 3
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
            case(FALLING_EDGE): CLR_BIT(MCUCSR, ISC2); break;
 4a8:	84 b7       	in	r24, 0x34	; 52
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
 4ac:	84 bf       	out	0x34, r24	; 52
 4ae:	08 95       	ret
            case(RISING_EDGE): SET_BIT(MCUCSR, ISC2); break;
 4b0:	84 b7       	in	r24, 0x34	; 52
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	84 bf       	out	0x34, r24	; 52
 4b6:	08 95       	ret

000004b8 <EXTI_Init>:
 * Arguments:
 *   - LOC_U8INTx: the external interrupt number (INT0, INT1, INT2)
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_Init(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
 4b8:	cf 93       	push	r28
 4ba:	c8 2f       	mov	r28, r24
    // Enable global interrupt
    sei(); 
 4bc:	78 94       	sei
    
    // Choose interrupt sense
    EXTI_ChooseISC(LOC_U8INTx, LOC_U8INT_SENSE);
 4be:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EXTI_ChooseISC>

    // Enable external interrupt
    SET_BIT(GICR, LOC_U8INTx);
 4c2:	2b b7       	in	r18, 0x3b	; 59
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <EXTI_Init+0x16>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	ca 95       	dec	r28
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <EXTI_Init+0x12>
 4d2:	82 2b       	or	r24, r18
 4d4:	8b bf       	out	0x3b, r24	; 59
}
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <GPIO_SetPinDir>:
void GPIO_SetPortVal(uint8_t LOC_U8Port, uint8_t LOC_U8Value){
	switch(LOC_U8Port){
		case PORTA: PORTA_REG = LOC_U8Value; break;
		case PORTB: PORTB_REG = LOC_U8Value; break;
		case PORTC: PORTC_REG = LOC_U8Value; break;
		case PORTD: PORTD_REG = LOC_U8Value; break;
 4da:	41 11       	cpse	r20, r1
 4dc:	38 c0       	rjmp	.+112    	; 0x54e <GPIO_SetPinDir+0x74>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	91 f0       	breq	.+36     	; 0x506 <GPIO_SetPinDir+0x2c>
 4e2:	28 f0       	brcs	.+10     	; 0x4ee <GPIO_SetPinDir+0x14>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	d9 f0       	breq	.+54     	; 0x51e <GPIO_SetPinDir+0x44>
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	29 f1       	breq	.+74     	; 0x536 <GPIO_SetPinDir+0x5c>
 4ec:	08 95       	ret
 4ee:	2a b3       	in	r18, 0x1a	; 26
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <GPIO_SetPinDir+0x20>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <GPIO_SetPinDir+0x1c>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	8a bb       	out	0x1a, r24	; 26
 504:	08 95       	ret
 506:	27 b3       	in	r18, 0x17	; 23
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <GPIO_SetPinDir+0x38>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <GPIO_SetPinDir+0x34>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	87 bb       	out	0x17, r24	; 23
 51c:	08 95       	ret
 51e:	24 b3       	in	r18, 0x14	; 20
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <GPIO_SetPinDir+0x50>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <GPIO_SetPinDir+0x4c>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	84 bb       	out	0x14, r24	; 20
 534:	08 95       	ret
 536:	21 b3       	in	r18, 0x11	; 17
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <GPIO_SetPinDir+0x68>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <GPIO_SetPinDir+0x64>
 546:	80 95       	com	r24
 548:	82 23       	and	r24, r18
 54a:	81 bb       	out	0x11, r24	; 17
 54c:	08 95       	ret
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	99 f5       	brne	.+102    	; 0x5b8 <GPIO_SetPinDir+0xde>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	89 f0       	breq	.+34     	; 0x578 <GPIO_SetPinDir+0x9e>
 556:	28 f0       	brcs	.+10     	; 0x562 <GPIO_SetPinDir+0x88>
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	c9 f0       	breq	.+50     	; 0x58e <GPIO_SetPinDir+0xb4>
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	11 f1       	breq	.+68     	; 0x5a4 <GPIO_SetPinDir+0xca>
 560:	08 95       	ret
 562:	2a b3       	in	r18, 0x1a	; 26
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <GPIO_SetPinDir+0x94>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <GPIO_SetPinDir+0x90>
 572:	82 2b       	or	r24, r18
 574:	8a bb       	out	0x1a, r24	; 26
 576:	08 95       	ret
 578:	27 b3       	in	r18, 0x17	; 23
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_SetPinDir+0xaa>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_SetPinDir+0xa6>
 588:	82 2b       	or	r24, r18
 58a:	87 bb       	out	0x17, r24	; 23
 58c:	08 95       	ret
 58e:	24 b3       	in	r18, 0x14	; 20
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <GPIO_SetPinDir+0xc0>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <GPIO_SetPinDir+0xbc>
 59e:	82 2b       	or	r24, r18
 5a0:	84 bb       	out	0x14, r24	; 20
 5a2:	08 95       	ret
 5a4:	21 b3       	in	r18, 0x11	; 17
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <GPIO_SetPinDir+0xd6>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <GPIO_SetPinDir+0xd2>
 5b4:	82 2b       	or	r24, r18
 5b6:	81 bb       	out	0x11, r24	; 17
 5b8:	08 95       	ret

000005ba <GPIO_SetPinVal>:
 5ba:	41 11       	cpse	r20, r1
 5bc:	38 c0       	rjmp	.+112    	; 0x62e <GPIO_SetPinVal+0x74>
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	91 f0       	breq	.+36     	; 0x5e6 <GPIO_SetPinVal+0x2c>
 5c2:	28 f0       	brcs	.+10     	; 0x5ce <GPIO_SetPinVal+0x14>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	d9 f0       	breq	.+54     	; 0x5fe <GPIO_SetPinVal+0x44>
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	29 f1       	breq	.+74     	; 0x616 <GPIO_SetPinVal+0x5c>
 5cc:	08 95       	ret
 5ce:	2b b3       	in	r18, 0x1b	; 27
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <GPIO_SetPinVal+0x20>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <GPIO_SetPinVal+0x1c>
 5de:	80 95       	com	r24
 5e0:	82 23       	and	r24, r18
 5e2:	8b bb       	out	0x1b, r24	; 27
 5e4:	08 95       	ret
 5e6:	28 b3       	in	r18, 0x18	; 24
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <GPIO_SetPinVal+0x38>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <GPIO_SetPinVal+0x34>
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	08 95       	ret
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <GPIO_SetPinVal+0x50>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <GPIO_SetPinVal+0x4c>
 60e:	80 95       	com	r24
 610:	82 23       	and	r24, r18
 612:	85 bb       	out	0x15, r24	; 21
 614:	08 95       	ret
 616:	22 b3       	in	r18, 0x12	; 18
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <GPIO_SetPinVal+0x68>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <GPIO_SetPinVal+0x64>
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	82 bb       	out	0x12, r24	; 18
 62c:	08 95       	ret
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	99 f5       	brne	.+102    	; 0x698 <GPIO_SetPinVal+0xde>
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	89 f0       	breq	.+34     	; 0x658 <GPIO_SetPinVal+0x9e>
 636:	28 f0       	brcs	.+10     	; 0x642 <GPIO_SetPinVal+0x88>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	c9 f0       	breq	.+50     	; 0x66e <GPIO_SetPinVal+0xb4>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	11 f1       	breq	.+68     	; 0x684 <GPIO_SetPinVal+0xca>
 640:	08 95       	ret
 642:	2b b3       	in	r18, 0x1b	; 27
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_SetPinVal+0x94>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_SetPinVal+0x90>
 652:	82 2b       	or	r24, r18
 654:	8b bb       	out	0x1b, r24	; 27
 656:	08 95       	ret
 658:	28 b3       	in	r18, 0x18	; 24
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <GPIO_SetPinVal+0xaa>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <GPIO_SetPinVal+0xa6>
 668:	82 2b       	or	r24, r18
 66a:	88 bb       	out	0x18, r24	; 24
 66c:	08 95       	ret
 66e:	25 b3       	in	r18, 0x15	; 21
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <GPIO_SetPinVal+0xc0>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <GPIO_SetPinVal+0xbc>
 67e:	82 2b       	or	r24, r18
 680:	85 bb       	out	0x15, r24	; 21
 682:	08 95       	ret
 684:	22 b3       	in	r18, 0x12	; 18
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <GPIO_SetPinVal+0xd6>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <GPIO_SetPinVal+0xd2>
 694:	82 2b       	or	r24, r18
 696:	82 bb       	out	0x12, r24	; 18
 698:	08 95       	ret

0000069a <GPIO_ToggPin>:
 *  - uint8_t LOC_U8Port: the port of the pin (PORTA, PORTB, PORTC, or PORTD)
 *  - uint8_t LOC_U8Pin: the number of the pin (0 to 7)
 * Outputs: None
 */
void GPIO_ToggPin(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	switch(LOC_U8Port){
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	89 f0       	breq	.+34     	; 0x6c0 <GPIO_ToggPin+0x26>
 69e:	28 f0       	brcs	.+10     	; 0x6aa <GPIO_ToggPin+0x10>
 6a0:	82 30       	cpi	r24, 0x02	; 2
 6a2:	c9 f0       	breq	.+50     	; 0x6d6 <GPIO_ToggPin+0x3c>
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	11 f1       	breq	.+68     	; 0x6ec <GPIO_ToggPin+0x52>
 6a8:	08 95       	ret
		case PORTA: TOGG_BIT(PORTA_REG, LOC_U8Pin); break;
 6aa:	2b b3       	in	r18, 0x1b	; 27
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <GPIO_ToggPin+0x1c>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <GPIO_ToggPin+0x18>
 6ba:	82 27       	eor	r24, r18
 6bc:	8b bb       	out	0x1b, r24	; 27
 6be:	08 95       	ret
		case PORTB: TOGG_BIT(PORTB_REG, LOC_U8Pin); break;
 6c0:	28 b3       	in	r18, 0x18	; 24
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <GPIO_ToggPin+0x32>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <GPIO_ToggPin+0x2e>
 6d0:	82 27       	eor	r24, r18
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	08 95       	ret
		case PORTC: TOGG_BIT(PORTC_REG, LOC_U8Pin); break;
 6d6:	25 b3       	in	r18, 0x15	; 21
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <GPIO_ToggPin+0x48>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <GPIO_ToggPin+0x44>
 6e6:	82 27       	eor	r24, r18
 6e8:	85 bb       	out	0x15, r24	; 21
 6ea:	08 95       	ret
		case PORTD: TOGG_BIT(PORTD_REG, LOC_U8Pin); break;
 6ec:	22 b3       	in	r18, 0x12	; 18
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <GPIO_ToggPin+0x5e>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <GPIO_ToggPin+0x5a>
 6fc:	82 27       	eor	r24, r18
 6fe:	82 bb       	out	0x12, r24	; 18
 700:	08 95       	ret

00000702 <GPIO_GetPinVal>:
 * Outputs: 
 *  - uint8_t LOC_U8Result: the value of the specified pin 
*/
uint8_t GPIO_GetPinVal(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	uint8_t LOC_U8Result;
	switch(LOC_U8Port){
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	81 f0       	breq	.+32     	; 0x726 <GPIO_GetPinVal+0x24>
 706:	28 f0       	brcs	.+10     	; 0x712 <GPIO_GetPinVal+0x10>
 708:	82 30       	cpi	r24, 0x02	; 2
 70a:	b9 f0       	breq	.+46     	; 0x73a <GPIO_GetPinVal+0x38>
 70c:	83 30       	cpi	r24, 0x03	; 3
 70e:	f9 f0       	breq	.+62     	; 0x74e <GPIO_GetPinVal+0x4c>
 710:	27 c0       	rjmp	.+78     	; 0x760 <GPIO_GetPinVal+0x5e>
		case PORTA: LOC_U8Result = GET_BIT(PORTA_REG, LOC_U8Pin); break;
 712:	8b b3       	in	r24, 0x1b	; 27
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <GPIO_GetPinVal+0x1a>
 718:	95 95       	asr	r25
 71a:	87 95       	ror	r24
 71c:	6a 95       	dec	r22
 71e:	e2 f7       	brpl	.-8      	; 0x718 <GPIO_GetPinVal+0x16>
 720:	98 2f       	mov	r25, r24
 722:	91 70       	andi	r25, 0x01	; 1
 724:	1d c0       	rjmp	.+58     	; 0x760 <GPIO_GetPinVal+0x5e>
		case PORTB: LOC_U8Result = GET_BIT(PORTB_REG, LOC_U8Pin); break;
 726:	88 b3       	in	r24, 0x18	; 24
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <GPIO_GetPinVal+0x2e>
 72c:	95 95       	asr	r25
 72e:	87 95       	ror	r24
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <GPIO_GetPinVal+0x2a>
 734:	98 2f       	mov	r25, r24
 736:	91 70       	andi	r25, 0x01	; 1
 738:	13 c0       	rjmp	.+38     	; 0x760 <GPIO_GetPinVal+0x5e>
		case PORTC: LOC_U8Result = GET_BIT(PORTC_REG, LOC_U8Pin); break;
 73a:	85 b3       	in	r24, 0x15	; 21
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <GPIO_GetPinVal+0x42>
 740:	95 95       	asr	r25
 742:	87 95       	ror	r24
 744:	6a 95       	dec	r22
 746:	e2 f7       	brpl	.-8      	; 0x740 <GPIO_GetPinVal+0x3e>
 748:	98 2f       	mov	r25, r24
 74a:	91 70       	andi	r25, 0x01	; 1
 74c:	09 c0       	rjmp	.+18     	; 0x760 <GPIO_GetPinVal+0x5e>
		case PORTD: LOC_U8Result = GET_BIT(PORTD_REG, LOC_U8Pin); break;
 74e:	82 b3       	in	r24, 0x12	; 18
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <GPIO_GetPinVal+0x56>
 754:	95 95       	asr	r25
 756:	87 95       	ror	r24
 758:	6a 95       	dec	r22
 75a:	e2 f7       	brpl	.-8      	; 0x754 <GPIO_GetPinVal+0x52>
 75c:	98 2f       	mov	r25, r24
 75e:	91 70       	andi	r25, 0x01	; 1
	}
	return LOC_U8Result;
 760:	89 2f       	mov	r24, r25
 762:	08 95       	ret

00000764 <TMR0_InitNormalMode>:
 * overflow number, mode and prescaler.
 * The function sets the waveform generation mode bits in TCCR0 register according to the mode in the config struct.
 * Returns: void
 */
void TMR0_InitNormalMode(ST_TimerConfig_t* config){
    switch(config->mode){
 764:	fc 01       	movw	r30, r24
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	81 11       	cpse	r24, r1
 76a:	06 c0       	rjmp	.+12     	; 0x778 <TMR0_InitNormalMode+0x14>
		case TMR_NORMAL:
			CLR_BIT(TCCR0, WGM00);
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	8f 7b       	andi	r24, 0xBF	; 191
 770:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0, WGM01);
 772:	83 b7       	in	r24, 0x33	; 51
 774:	87 7f       	andi	r24, 0xF7	; 247
 776:	83 bf       	out	0x33, r24	; 51
 778:	08 95       	ret

0000077a <TMR0_Start>:
 * overflow number, mode and prescaler.
 * The function sets the initial value of TCNT0, and the prescaler bits in TCCR0 register according to the prescaler in the config struct.
 * Returns: void
 */
void TMR0_Start(ST_TimerConfig_t* config){
	TCNT0 = config->initVal;
 77a:	fc 01       	movw	r30, r24
 77c:	20 81       	ld	r18, Z
 77e:	22 bf       	out	0x32, r18	; 50
    switch(config->prescaler){
 780:	83 81       	ldd	r24, Z+3	; 0x03
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	f9 f0       	breq	.+62     	; 0x7c4 <TMR0_Start+0x4a>
 786:	28 f4       	brcc	.+10     	; 0x792 <TMR0_Start+0x18>
 788:	88 23       	and	r24, r24
 78a:	41 f0       	breq	.+16     	; 0x79c <TMR0_Start+0x22>
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	81 f0       	breq	.+32     	; 0x7b0 <TMR0_Start+0x36>
 790:	08 95       	ret
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	09 f1       	breq	.+66     	; 0x7d8 <TMR0_Start+0x5e>
 796:	84 30       	cpi	r24, 0x04	; 4
 798:	49 f1       	breq	.+82     	; 0x7ec <TMR0_Start+0x72>
 79a:	08 95       	ret
        case TMR0_NO_PRE: 
            SET_BIT(TCCR0, CS00);
 79c:	83 b7       	in	r24, 0x33	; 51
 79e:	81 60       	ori	r24, 0x01	; 1
 7a0:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 7a2:	83 b7       	in	r24, 0x33	; 51
 7a4:	8d 7f       	andi	r24, 0xFD	; 253
 7a6:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 7a8:	83 b7       	in	r24, 0x33	; 51
 7aa:	8b 7f       	andi	r24, 0xFB	; 251
 7ac:	83 bf       	out	0x33, r24	; 51
            break;
 7ae:	08 95       	ret

        case TMR0_PRE_8: 
            CLR_BIT(TCCR0, CS00);
 7b0:	83 b7       	in	r24, 0x33	; 51
 7b2:	8e 7f       	andi	r24, 0xFE	; 254
 7b4:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 7b6:	83 b7       	in	r24, 0x33	; 51
 7b8:	82 60       	ori	r24, 0x02	; 2
 7ba:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 7bc:	83 b7       	in	r24, 0x33	; 51
 7be:	8b 7f       	andi	r24, 0xFB	; 251
 7c0:	83 bf       	out	0x33, r24	; 51
            break;
 7c2:	08 95       	ret

        case TMR0_PRE_64: 
            SET_BIT(TCCR0, CS00);
 7c4:	83 b7       	in	r24, 0x33	; 51
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 7ca:	83 b7       	in	r24, 0x33	; 51
 7cc:	82 60       	ori	r24, 0x02	; 2
 7ce:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 7d0:	83 b7       	in	r24, 0x33	; 51
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	83 bf       	out	0x33, r24	; 51
            break;
 7d6:	08 95       	ret

        case TMR0_PRE_256: 
            CLR_BIT(TCCR0, CS00);
 7d8:	83 b7       	in	r24, 0x33	; 51
 7da:	8e 7f       	andi	r24, 0xFE	; 254
 7dc:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 7de:	83 b7       	in	r24, 0x33	; 51
 7e0:	8d 7f       	andi	r24, 0xFD	; 253
 7e2:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 7e4:	83 b7       	in	r24, 0x33	; 51
 7e6:	84 60       	ori	r24, 0x04	; 4
 7e8:	83 bf       	out	0x33, r24	; 51
            break;
 7ea:	08 95       	ret

        case TMR0_PRE_1024: 
            SET_BIT(TCCR0, CS00);
 7ec:	83 b7       	in	r24, 0x33	; 51
 7ee:	81 60       	ori	r24, 0x01	; 1
 7f0:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 7f2:	83 b7       	in	r24, 0x33	; 51
 7f4:	8d 7f       	andi	r24, 0xFD	; 253
 7f6:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 7f8:	83 b7       	in	r24, 0x33	; 51
 7fa:	84 60       	ori	r24, 0x04	; 4
 7fc:	83 bf       	out	0x33, r24	; 51
 7fe:	08 95       	ret

00000800 <TMR0_Stop>:
 * Description: This function is responsible for stopping the Timer0 module.
 * It sets all the bits in the TCCR0 register to 0, effectively stopping the timer.
 * Returns: void
 */
void TMR0_Stop(void){
	TCCR0 = 0x00; // stop TIMER0
 800:	13 be       	out	0x33, r1	; 51
 802:	08 95       	ret

00000804 <TMR0_GetState>:
 *Description: This function is responsible for getting the state of the Timer0 overflow flag.
 *It reads the TOV0 bit in the TIFR register and returns its value.
 *Returns: uint8_t (1 if overflow occurred, 0 if no overflow)
 */
uint8_t TMR0_GetState(void){
    return GET_BIT(TIFR,TOV0);
 804:	88 b7       	in	r24, 0x38	; 56
}
 806:	81 70       	andi	r24, 0x01	; 1
 808:	08 95       	ret

0000080a <TMR0_Delay>:
 * The function starts the timer and waits for the number of overflows specified in the config struct.
 * After each overflow, it clears the overflow flag.
 * It stops the timer after the specified number of overflows.
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	8c 01       	movw	r16, r24
	TMR0_Start(config);
 812:	0e 94 bd 03 	call	0x77a	; 0x77a <TMR0_Start>
	uint8_t overflowCount = 0;
 816:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 818:	08 c0       	rjmp	.+16     	; 0x82a <TMR0_Delay+0x20>
		while(!TMR0_GetState());
 81a:	0e 94 02 04 	call	0x804	; 0x804 <TMR0_GetState>
 81e:	88 23       	and	r24, r24
 820:	e1 f3       	breq	.-8      	; 0x81a <TMR0_Delay+0x10>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 822:	88 b7       	in	r24, 0x38	; 56
 824:	81 60       	ori	r24, 0x01	; 1
 826:	88 bf       	out	0x38, r24	; 56
		overflowCount++;
 828:	cf 5f       	subi	r28, 0xFF	; 255
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 82a:	f8 01       	movw	r30, r16
 82c:	81 81       	ldd	r24, Z+1	; 0x01
 82e:	c8 17       	cp	r28, r24
 830:	a0 f3       	brcs	.-24     	; 0x81a <TMR0_Delay+0x10>
		while(!TMR0_GetState());
		SET_BIT(TIFR, TOV0); // clear overflow flag
		overflowCount++;
	}
	TMR0_Stop();
 832:	0e 94 00 04 	call	0x800	; 0x800 <TMR0_Stop>
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <__vector_2>:
		GPIO_SetPinVal(PORTA, PIN0, LOW);
		if(flag) GPIO_SetPinVal(PORTA, PIN0, HIGH);
	}
}

ISR(EXTI1){
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	8f 93       	push	r24
	flag = 1;
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 850:	8f 91       	pop	r24
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
