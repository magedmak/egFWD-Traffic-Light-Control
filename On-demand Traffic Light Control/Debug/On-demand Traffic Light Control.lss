
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c0f  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaa  00000000  00000000  00002683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e84  00000000  00000000  0000312d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000738  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092e  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_1>
   8:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  8a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
EN_AppMode_t appMode;
EN_LEDColor_t carLEDColor;

void APP_Init(void){
	// Initialize LEDs for cars 
	LED_Init(PORTA, PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	LED_Init(PORTA, PIN1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	LED_Init(PORTA, PIN2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	
	// Initialize LEDs for pedestrians 
	LED_Init(PORTB, PIN0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	LED_Init(PORTB, PIN1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	LED_Init(PORTB, PIN2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 97 01 	call	0x32e	; 0x32e <LED_Init>
	
	// Initialize Button
	BUTTON_Init(PORTD, PIN2);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 93 01 	call	0x326	; 0x326 <BUTTON_Init>
	
	// Initialize Timer (Normal mode)
	TMR0_InitNormalMode(&timerConfig_Halfsec);
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TMR0_InitNormalMode>
	
	// Initialize INT0 to sense a rising edge 
	EXTI_Init(INT0, RISING_EDGE);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 0c 02 	call	0x418	; 0x418 <EXTI_Init>
	
	// Initialize the application mode to normal
	appMode = NORMAL;
  da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
  de:	08 95       	ret

000000e0 <APP_Start>:
}

void APP_Start(void){
  e0:	cf 93       	push	r28
	switch(appMode){
  e2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
  e6:	88 23       	and	r24, r24
  e8:	21 f0       	breq	.+8      	; 0xf2 <APP_Start+0x12>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	09 f4       	brne	.+2      	; 0xf0 <APP_Start+0x10>
  ee:	99 c0       	rjmp	.+306    	; 0x222 <APP_Start+0x142>
  f0:	d9 c0       	rjmp	.+434    	; 0x2a4 <APP_Start+0x1c4>
		case NORMAL:
			/* 1. Car's green LED on for 5 seconds */
			LED_On(PORTA, PIN2); // turn car's green LED on
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			LED_On(PORTB, PIN0); // turn pedestrian's red LED on
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			for(uint8_t i=0; i<10; i++){ 
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	09 c0       	rjmp	.+18     	; 0x118 <APP_Start+0x38>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
 10e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	19 f0       	breq	.+6      	; 0x11c <APP_Start+0x3c>
	switch(appMode){
		case NORMAL:
			/* 1. Car's green LED on for 5 seconds */
			LED_On(PORTA, PIN2); // turn car's green LED on
			LED_On(PORTB, PIN0); // turn pedestrian's red LED on
			for(uint8_t i=0; i<10; i++){ 
 116:	cf 5f       	subi	r28, 0xFF	; 255
 118:	ca 30       	cpi	r28, 0x0A	; 10
 11a:	a8 f3       	brcs	.-22     	; 0x106 <APP_Start+0x26>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
			}
			LED_Off(PORTA, PIN2); // turn car's green LED off
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN0); // turn pedestrian's red LED off
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 12c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	09 f4       	brne	.+2      	; 0x136 <APP_Start+0x56>
 134:	b7 c0       	rjmp	.+366    	; 0x2a4 <APP_Start+0x1c4>
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	13 c0       	rjmp	.+38     	; 0x160 <APP_Start+0x80>
			
			/* 2. Car's yellow LED blinks for 5 seconds */
			for(uint8_t i=0; i<10; i++){
				if(0 == i%2){
 13a:	c0 fd       	sbrc	r28, 0
 13c:	08 c0       	rjmp	.+16     	; 0x14e <APP_Start+0x6e>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
 156:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f0       	breq	.+6      	; 0x164 <APP_Start+0x84>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
			
			/* 2. Car's yellow LED blinks for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 15e:	cf 5f       	subi	r28, 0xFF	; 255
 160:	ca 30       	cpi	r28, 0x0A	; 10
 162:	58 f3       	brcs	.-42     	; 0x13a <APP_Start+0x5a>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
			}
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 174:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	09 f4       	brne	.+2      	; 0x17e <APP_Start+0x9e>
 17c:	93 c0       	rjmp	.+294    	; 0x2a4 <APP_Start+0x1c4>
			
			/* 3. Car's red LED on for 5 seconds */
			LED_On(PORTA, PIN0); // turn car's red LED on
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			for(uint8_t i=0; i<10; i++){
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <APP_Start+0xc4>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
 19a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <APP_Start+0xc8>
			if(PEDESTRIAN == appMode) break;
			
			/* 3. Car's red LED on for 5 seconds */
			LED_On(PORTA, PIN0); // turn car's red LED on
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
			for(uint8_t i=0; i<10; i++){
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
 1a4:	ca 30       	cpi	r28, 0x0A	; 10
 1a6:	a8 f3       	brcs	.-22     	; 0x192 <APP_Start+0xb2>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
				
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
			}
			LED_Off(PORTA, PIN0); // turn car's red LED off
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN2); // turn pedestrian's green LED off
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
 1b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <APP_Start+0xe2>
 1c0:	71 c0       	rjmp	.+226    	; 0x2a4 <APP_Start+0x1c4>
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <APP_Start+0x10c>
			
			/* 4. Car's yellow LED blinks for 5 seconds */
			for(uint8_t i=0; i<10; i++){
				if(0 == i%2){
 1c6:	c0 fd       	sbrc	r28, 0
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <APP_Start+0xfa>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
							
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
 1e2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <appMode>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <APP_Start+0x110>
			
			/* Check if button pressed and mode changed */
			if(PEDESTRIAN == appMode) break;
			
			/* 4. Car's yellow LED blinks for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 1ea:	cf 5f       	subi	r28, 0xFF	; 255
 1ec:	ca 30       	cpi	r28, 0x0A	; 10
 1ee:	58 f3       	brcs	.-42     	; 0x1c6 <APP_Start+0xe6>
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
							
				/* Check if button pressed and mode changed */
				if(PEDESTRIAN == appMode) break;
			}
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
		break;
 200:	51 c0       	rjmp	.+162    	; 0x2a4 <APP_Start+0x1c4>
		
		case PEDESTRIAN:
			/* Car's and pedestrian's yellow LEDs blink for 5 seconds */
			for(uint8_t i=0; i<10; i++){
				if(0 == i%2){
 202:	c0 fd       	sbrc	r28, 0
 204:	08 c0       	rjmp	.+16     	; 0x216 <APP_Start+0x136>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
		break;
		
		case PEDESTRIAN:
			/* Car's and pedestrian's yellow LEDs blink for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 21e:	cf 5f       	subi	r28, 0xFF	; 255
 220:	01 c0       	rjmp	.+2      	; 0x224 <APP_Start+0x144>
	// Initialize the application mode to normal
	appMode = NORMAL;
}

void APP_Start(void){
	switch(appMode){
 222:	c0 e0       	ldi	r28, 0x00	; 0
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
		break;
		
		case PEDESTRIAN:
			/* Car's and pedestrian's yellow LEDs blink for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 224:	ca 30       	cpi	r28, 0x0A	; 10
 226:	68 f3       	brcs	.-38     	; 0x202 <APP_Start+0x122>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
			}
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off				
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			/* Car's red and pedestrian's green LEDs are on for 5 seconds */
			LED_On(PORTA, PIN0); // turn car's red LED on
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 9b 01 	call	0x336	; 0x336 <LED_On>
			for(uint8_t i=0; i<10; i++) TMR0_Delay(&timerConfig_Halfsec); // delay 5 seconds
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	05 c0       	rjmp	.+10     	; 0x256 <APP_Start+0x176>
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	ca 30       	cpi	r28, 0x0A	; 10
 258:	c8 f3       	brcs	.-14     	; 0x24c <APP_Start+0x16c>
			LED_Off(PORTA, PIN0); // turn car's red LED off
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			/* Car's and pedestrian's yellow LEDs blink for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	0f c0       	rjmp	.+30     	; 0x284 <APP_Start+0x1a4>
				if(0 == i%2){
 266:	c0 fd       	sbrc	r28, 0
 268:	08 c0       	rjmp	.+16     	; 0x27a <APP_Start+0x19a>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 a3 01 	call	0x346	; 0x346 <LED_Blink>
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
 27a:	80 e6       	ldi	r24, 0x60	; 96
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 b5 03 	call	0x76a	; 0x76a <TMR0_Delay>
			LED_On(PORTB, PIN2); // turn pedestrian's green LED on
			for(uint8_t i=0; i<10; i++) TMR0_Delay(&timerConfig_Halfsec); // delay 5 seconds
			LED_Off(PORTA, PIN0); // turn car's red LED off
			
			/* Car's and pedestrian's yellow LEDs blink for 5 seconds */
			for(uint8_t i=0; i<10; i++){
 282:	cf 5f       	subi	r28, 0xFF	; 255
 284:	ca 30       	cpi	r28, 0x0A	; 10
 286:	78 f3       	brcs	.-34     	; 0x266 <APP_Start+0x186>
					LED_Blink(PORTA, PIN1); // toggle car's yellow LED
					LED_Blink(PORTB, PIN1); // toggle pedestrian's yellow LED
				}
				TMR0_Delay(&timerConfig_Halfsec); // delay 0.5 second
			}
			LED_Off(PORTA, PIN1); // turn car's yellow LED off
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN1); // turn pedestrian's yellow LED off
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			LED_Off(PORTB, PIN2); // turn pedestrian's green LED off
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 9f 01 	call	0x33e	; 0x33e <LED_Off>
			
			/* Back to normal mode */
			appMode = NORMAL;
 2a0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <appMode>
		break;
	}
}
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <__vector_1>:

ISR(EXTI0){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	// Get the color of car's LED when the button is pressed
	if(LED_IsOn(PORTA, PIN0)) carLEDColor = RED;
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_IsOn>
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <__vector_1+0x34>
 2d6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <carLEDColor>
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <__vector_1+0x4e>
	else if(LED_IsOn(PORTA, PIN2)) carLEDColor = GREEN;
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_IsOn>
 2e4:	88 23       	and	r24, r24
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <__vector_1+0x48>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <__vector_1+0x4e>
	else carLEDColor = YELLOW;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <carLEDColor>
	
	// Change the mode to pedestrian when the button is pressed
	if(RED != carLEDColor) appMode = PEDESTRIAN;
 2f6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <carLEDColor>
 2fa:	88 23       	and	r24, r24
 2fc:	19 f0       	breq	.+6      	; 0x304 <__vector_1+0x5c>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <appMode>
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <BUTTON_Init>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void BUTTON_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
    GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, INPUT);
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	0e 94 1d 02 	call	0x43a	; 0x43a <GPIO_SetPinDir>
 32c:	08 95       	ret

0000032e <LED_Init>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Init(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinDir(LOC_U8Port, LOC_U8Pin, OUTPUT);
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	0e 94 1d 02 	call	0x43a	; 0x43a <GPIO_SetPinDir>
 334:	08 95       	ret

00000336 <LED_On>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_On(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	0e 94 8d 02 	call	0x51a	; 0x51a <GPIO_SetPinVal>
 33c:	08 95       	ret

0000033e <LED_Off>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Off(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_SetPinVal(LOC_U8Port, LOC_U8Pin, LOW);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	0e 94 8d 02 	call	0x51a	; 0x51a <GPIO_SetPinVal>
 344:	08 95       	ret

00000346 <LED_Blink>:
 *   - LOC_U8Port: the port of the LED (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the LED (e.g. PIN0, PIN1, etc.)
 * Return value: void
 */
void LED_Blink(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	GPIO_ToggPin(LOC_U8Port, LOC_U8Pin); // blink LED
 346:	0e 94 fd 02 	call	0x5fa	; 0x5fa <GPIO_ToggPin>
 34a:	08 95       	ret

0000034c <LED_IsOn>:
 *   - LOC_U8Port: the port of the button (e.g. PORTA, PORTB, etc.)
 *   - LOC_U8Pin: the pin of the button (e.g. PIN0, PIN1, etc.)
 * Return value: the value of the LED pin (HIGH or LOW)
 */
uint8_t LED_IsOn(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	return GPIO_GetPinVal(LOC_U8Port, LOC_U8Pin);
 34c:	0e 94 31 03 	call	0x662	; 0x662 <GPIO_GetPinVal>
 350:	08 95       	ret

00000352 <main>:

#include "APP/APP_Interface.h"

int main(void)
{
	APP_Init();
 352:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
	
	while(1){
		APP_Start();
 356:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Start>
 35a:	fd cf       	rjmp	.-6      	; 0x356 <main+0x4>

0000035c <EXTI_ChooseISC>:
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_ChooseISC(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
    // for INT0
    if(INT0 == LOC_U8INTx){
 35c:	86 30       	cpi	r24, 0x06	; 6
 35e:	31 f5       	brne	.+76     	; 0x3ac <EXTI_ChooseISC+0x50>
        switch(LOC_U8INT_SENSE){
 360:	62 30       	cpi	r22, 0x02	; 2
 362:	f1 f0       	breq	.+60     	; 0x3a0 <EXTI_ChooseISC+0x44>
 364:	18 f4       	brcc	.+6      	; 0x36c <EXTI_ChooseISC+0x10>
 366:	66 23       	and	r22, r22
 368:	31 f0       	breq	.+12     	; 0x376 <EXTI_ChooseISC+0x1a>
 36a:	20 c0       	rjmp	.+64     	; 0x3ac <EXTI_ChooseISC+0x50>
 36c:	63 30       	cpi	r22, 0x03	; 3
 36e:	89 f0       	breq	.+34     	; 0x392 <EXTI_ChooseISC+0x36>
 370:	64 30       	cpi	r22, 0x04	; 4
 372:	41 f0       	breq	.+16     	; 0x384 <EXTI_ChooseISC+0x28>
 374:	1b c0       	rjmp	.+54     	; 0x3ac <EXTI_ChooseISC+0x50>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 376:	95 b7       	in	r25, 0x35	; 53
 378:	9e 7f       	andi	r25, 0xFE	; 254
 37a:	95 bf       	out	0x35, r25	; 53
 37c:	95 b7       	in	r25, 0x35	; 53
 37e:	9d 7f       	andi	r25, 0xFD	; 253
 380:	95 bf       	out	0x35, r25	; 53
 382:	14 c0       	rjmp	.+40     	; 0x3ac <EXTI_ChooseISC+0x50>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC00); CLR_BIT(MCUCR, ISC01); break;
 384:	95 b7       	in	r25, 0x35	; 53
 386:	91 60       	ori	r25, 0x01	; 1
 388:	95 bf       	out	0x35, r25	; 53
 38a:	95 b7       	in	r25, 0x35	; 53
 38c:	9d 7f       	andi	r25, 0xFD	; 253
 38e:	95 bf       	out	0x35, r25	; 53
 390:	0d c0       	rjmp	.+26     	; 0x3ac <EXTI_ChooseISC+0x50>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 392:	95 b7       	in	r25, 0x35	; 53
 394:	9e 7f       	andi	r25, 0xFE	; 254
 396:	95 bf       	out	0x35, r25	; 53
 398:	95 b7       	in	r25, 0x35	; 53
 39a:	92 60       	ori	r25, 0x02	; 2
 39c:	95 bf       	out	0x35, r25	; 53
 39e:	06 c0       	rjmp	.+12     	; 0x3ac <EXTI_ChooseISC+0x50>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC00); SET_BIT(MCUCR, ISC01); break;
 3a0:	95 b7       	in	r25, 0x35	; 53
 3a2:	91 60       	ori	r25, 0x01	; 1
 3a4:	95 bf       	out	0x35, r25	; 53
 3a6:	95 b7       	in	r25, 0x35	; 53
 3a8:	92 60       	ori	r25, 0x02	; 2
 3aa:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT1
    if(INT1 == LOC_U8INTx){
 3ac:	87 30       	cpi	r24, 0x07	; 7
 3ae:	31 f5       	brne	.+76     	; 0x3fc <EXTI_ChooseISC+0xa0>
        switch(LOC_U8INT_SENSE){
 3b0:	62 30       	cpi	r22, 0x02	; 2
 3b2:	f1 f0       	breq	.+60     	; 0x3f0 <EXTI_ChooseISC+0x94>
 3b4:	18 f4       	brcc	.+6      	; 0x3bc <EXTI_ChooseISC+0x60>
 3b6:	66 23       	and	r22, r22
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <EXTI_ChooseISC+0x6a>
 3ba:	20 c0       	rjmp	.+64     	; 0x3fc <EXTI_ChooseISC+0xa0>
 3bc:	63 30       	cpi	r22, 0x03	; 3
 3be:	89 f0       	breq	.+34     	; 0x3e2 <EXTI_ChooseISC+0x86>
 3c0:	64 30       	cpi	r22, 0x04	; 4
 3c2:	41 f0       	breq	.+16     	; 0x3d4 <EXTI_ChooseISC+0x78>
 3c4:	1b c0       	rjmp	.+54     	; 0x3fc <EXTI_ChooseISC+0xa0>
            case(LOW_LEVEL): CLR_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 3c6:	95 b7       	in	r25, 0x35	; 53
 3c8:	9b 7f       	andi	r25, 0xFB	; 251
 3ca:	95 bf       	out	0x35, r25	; 53
 3cc:	95 b7       	in	r25, 0x35	; 53
 3ce:	97 7f       	andi	r25, 0xF7	; 247
 3d0:	95 bf       	out	0x35, r25	; 53
 3d2:	14 c0       	rjmp	.+40     	; 0x3fc <EXTI_ChooseISC+0xa0>
            case(ANY_LOGICAL_CHANGE): SET_BIT(MCUCR, ISC10); CLR_BIT(MCUCR, ISC11); break;
 3d4:	95 b7       	in	r25, 0x35	; 53
 3d6:	94 60       	ori	r25, 0x04	; 4
 3d8:	95 bf       	out	0x35, r25	; 53
 3da:	95 b7       	in	r25, 0x35	; 53
 3dc:	97 7f       	andi	r25, 0xF7	; 247
 3de:	95 bf       	out	0x35, r25	; 53
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <EXTI_ChooseISC+0xa0>
            case(FALLING_EDGE): CLR_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 3e2:	95 b7       	in	r25, 0x35	; 53
 3e4:	9b 7f       	andi	r25, 0xFB	; 251
 3e6:	95 bf       	out	0x35, r25	; 53
 3e8:	95 b7       	in	r25, 0x35	; 53
 3ea:	98 60       	ori	r25, 0x08	; 8
 3ec:	95 bf       	out	0x35, r25	; 53
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <EXTI_ChooseISC+0xa0>
            case(RISING_EDGE): SET_BIT(MCUCR, ISC10); SET_BIT(MCUCR, ISC11); break;
 3f0:	95 b7       	in	r25, 0x35	; 53
 3f2:	94 60       	ori	r25, 0x04	; 4
 3f4:	95 bf       	out	0x35, r25	; 53
 3f6:	95 b7       	in	r25, 0x35	; 53
 3f8:	98 60       	ori	r25, 0x08	; 8
 3fa:	95 bf       	out	0x35, r25	; 53
        }
    }

    // for INT2
    if(INT2 == LOC_U8INTx){
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	59 f4       	brne	.+22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        switch(LOC_U8INT_SENSE){
 400:	62 30       	cpi	r22, 0x02	; 2
 402:	31 f0       	breq	.+12     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 404:	63 30       	cpi	r22, 0x03	; 3
 406:	39 f4       	brne	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
            case(FALLING_EDGE): CLR_BIT(MCUCSR, ISC2); break;
 408:	84 b7       	in	r24, 0x34	; 52
 40a:	8f 7b       	andi	r24, 0xBF	; 191
 40c:	84 bf       	out	0x34, r24	; 52
 40e:	08 95       	ret
            case(RISING_EDGE): SET_BIT(MCUCSR, ISC2); break;
 410:	84 b7       	in	r24, 0x34	; 52
 412:	80 64       	ori	r24, 0x40	; 64
 414:	84 bf       	out	0x34, r24	; 52
 416:	08 95       	ret

00000418 <EXTI_Init>:
 * Arguments:
 *   - LOC_U8INTx: the external interrupt number (INT0, INT1, INT2)
 *   - LOC_U8INT_SENSE: the sense of the interrupt (LOW_LEVEL, ANY_LOGICAL_CHANGE, FALLING_EDGE, RISING_EDGE)
 * Return value: void
 */
void EXTI_Init(uint8_t LOC_U8INTx, EN_InterruptSense_t LOC_U8INT_SENSE){
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
    // Enable global interrupt
    sei(); 
 41c:	78 94       	sei
    
    // Choose interrupt sense
    EXTI_ChooseISC(LOC_U8INTx, LOC_U8INT_SENSE);
 41e:	0e 94 ae 01 	call	0x35c	; 0x35c <EXTI_ChooseISC>

    // Enable external interrupt
    SET_BIT(GICR, LOC_U8INTx);
 422:	2b b7       	in	r18, 0x3b	; 59
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <EXTI_Init+0x16>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	ca 95       	dec	r28
 430:	e2 f7       	brpl	.-8      	; 0x42a <EXTI_Init+0x12>
 432:	82 2b       	or	r24, r18
 434:	8b bf       	out	0x3b, r24	; 59
}
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <GPIO_SetPinDir>:
void GPIO_SetPortVal(uint8_t LOC_U8Port, uint8_t LOC_U8Value){
	switch(LOC_U8Port){
		case PORTA: PORTA_REG = LOC_U8Value; break;
		case PORTB: PORTB_REG = LOC_U8Value; break;
		case PORTC: PORTC_REG = LOC_U8Value; break;
		case PORTD: PORTD_REG = LOC_U8Value; break;
 43a:	41 11       	cpse	r20, r1
 43c:	38 c0       	rjmp	.+112    	; 0x4ae <GPIO_SetPinDir+0x74>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <GPIO_SetPinDir+0x2c>
 442:	28 f0       	brcs	.+10     	; 0x44e <GPIO_SetPinDir+0x14>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	d9 f0       	breq	.+54     	; 0x47e <GPIO_SetPinDir+0x44>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	29 f1       	breq	.+74     	; 0x496 <GPIO_SetPinDir+0x5c>
 44c:	08 95       	ret
 44e:	2a b3       	in	r18, 0x1a	; 26
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <GPIO_SetPinDir+0x20>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <GPIO_SetPinDir+0x1c>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	8a bb       	out	0x1a, r24	; 26
 464:	08 95       	ret
 466:	27 b3       	in	r18, 0x17	; 23
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <GPIO_SetPinDir+0x38>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <GPIO_SetPinDir+0x34>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	87 bb       	out	0x17, r24	; 23
 47c:	08 95       	ret
 47e:	24 b3       	in	r18, 0x14	; 20
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <GPIO_SetPinDir+0x50>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <GPIO_SetPinDir+0x4c>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	84 bb       	out	0x14, r24	; 20
 494:	08 95       	ret
 496:	21 b3       	in	r18, 0x11	; 17
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <GPIO_SetPinDir+0x68>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <GPIO_SetPinDir+0x64>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	81 bb       	out	0x11, r24	; 17
 4ac:	08 95       	ret
 4ae:	41 30       	cpi	r20, 0x01	; 1
 4b0:	99 f5       	brne	.+102    	; 0x518 <GPIO_SetPinDir+0xde>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	89 f0       	breq	.+34     	; 0x4d8 <GPIO_SetPinDir+0x9e>
 4b6:	28 f0       	brcs	.+10     	; 0x4c2 <GPIO_SetPinDir+0x88>
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	c9 f0       	breq	.+50     	; 0x4ee <GPIO_SetPinDir+0xb4>
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	11 f1       	breq	.+68     	; 0x504 <GPIO_SetPinDir+0xca>
 4c0:	08 95       	ret
 4c2:	2a b3       	in	r18, 0x1a	; 26
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <GPIO_SetPinDir+0x94>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <GPIO_SetPinDir+0x90>
 4d2:	82 2b       	or	r24, r18
 4d4:	8a bb       	out	0x1a, r24	; 26
 4d6:	08 95       	ret
 4d8:	27 b3       	in	r18, 0x17	; 23
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <GPIO_SetPinDir+0xaa>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <GPIO_SetPinDir+0xa6>
 4e8:	82 2b       	or	r24, r18
 4ea:	87 bb       	out	0x17, r24	; 23
 4ec:	08 95       	ret
 4ee:	24 b3       	in	r18, 0x14	; 20
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <GPIO_SetPinDir+0xc0>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <GPIO_SetPinDir+0xbc>
 4fe:	82 2b       	or	r24, r18
 500:	84 bb       	out	0x14, r24	; 20
 502:	08 95       	ret
 504:	21 b3       	in	r18, 0x11	; 17
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <GPIO_SetPinDir+0xd6>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <GPIO_SetPinDir+0xd2>
 514:	82 2b       	or	r24, r18
 516:	81 bb       	out	0x11, r24	; 17
 518:	08 95       	ret

0000051a <GPIO_SetPinVal>:
 51a:	41 11       	cpse	r20, r1
 51c:	38 c0       	rjmp	.+112    	; 0x58e <GPIO_SetPinVal+0x74>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	91 f0       	breq	.+36     	; 0x546 <GPIO_SetPinVal+0x2c>
 522:	28 f0       	brcs	.+10     	; 0x52e <GPIO_SetPinVal+0x14>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	d9 f0       	breq	.+54     	; 0x55e <GPIO_SetPinVal+0x44>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	29 f1       	breq	.+74     	; 0x576 <GPIO_SetPinVal+0x5c>
 52c:	08 95       	ret
 52e:	2b b3       	in	r18, 0x1b	; 27
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <GPIO_SetPinVal+0x20>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <GPIO_SetPinVal+0x1c>
 53e:	80 95       	com	r24
 540:	82 23       	and	r24, r18
 542:	8b bb       	out	0x1b, r24	; 27
 544:	08 95       	ret
 546:	28 b3       	in	r18, 0x18	; 24
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <GPIO_SetPinVal+0x38>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <GPIO_SetPinVal+0x34>
 556:	80 95       	com	r24
 558:	82 23       	and	r24, r18
 55a:	88 bb       	out	0x18, r24	; 24
 55c:	08 95       	ret
 55e:	25 b3       	in	r18, 0x15	; 21
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <GPIO_SetPinVal+0x50>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <GPIO_SetPinVal+0x4c>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	85 bb       	out	0x15, r24	; 21
 574:	08 95       	ret
 576:	22 b3       	in	r18, 0x12	; 18
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <GPIO_SetPinVal+0x68>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <GPIO_SetPinVal+0x64>
 586:	80 95       	com	r24
 588:	82 23       	and	r24, r18
 58a:	82 bb       	out	0x12, r24	; 18
 58c:	08 95       	ret
 58e:	41 30       	cpi	r20, 0x01	; 1
 590:	99 f5       	brne	.+102    	; 0x5f8 <GPIO_SetPinVal+0xde>
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	89 f0       	breq	.+34     	; 0x5b8 <GPIO_SetPinVal+0x9e>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <GPIO_SetPinVal+0x88>
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	c9 f0       	breq	.+50     	; 0x5ce <GPIO_SetPinVal+0xb4>
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	11 f1       	breq	.+68     	; 0x5e4 <GPIO_SetPinVal+0xca>
 5a0:	08 95       	ret
 5a2:	2b b3       	in	r18, 0x1b	; 27
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <GPIO_SetPinVal+0x94>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <GPIO_SetPinVal+0x90>
 5b2:	82 2b       	or	r24, r18
 5b4:	8b bb       	out	0x1b, r24	; 27
 5b6:	08 95       	ret
 5b8:	28 b3       	in	r18, 0x18	; 24
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <GPIO_SetPinVal+0xaa>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <GPIO_SetPinVal+0xa6>
 5c8:	82 2b       	or	r24, r18
 5ca:	88 bb       	out	0x18, r24	; 24
 5cc:	08 95       	ret
 5ce:	25 b3       	in	r18, 0x15	; 21
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <GPIO_SetPinVal+0xc0>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <GPIO_SetPinVal+0xbc>
 5de:	82 2b       	or	r24, r18
 5e0:	85 bb       	out	0x15, r24	; 21
 5e2:	08 95       	ret
 5e4:	22 b3       	in	r18, 0x12	; 18
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <GPIO_SetPinVal+0xd6>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <GPIO_SetPinVal+0xd2>
 5f4:	82 2b       	or	r24, r18
 5f6:	82 bb       	out	0x12, r24	; 18
 5f8:	08 95       	ret

000005fa <GPIO_ToggPin>:
 *  - uint8_t LOC_U8Port: the port of the pin (PORTA, PORTB, PORTC, or PORTD)
 *  - uint8_t LOC_U8Pin: the number of the pin (0 to 7)
 * Outputs: None
 */
void GPIO_ToggPin(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	switch(LOC_U8Port){
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	89 f0       	breq	.+34     	; 0x620 <GPIO_ToggPin+0x26>
 5fe:	28 f0       	brcs	.+10     	; 0x60a <GPIO_ToggPin+0x10>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	c9 f0       	breq	.+50     	; 0x636 <GPIO_ToggPin+0x3c>
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	11 f1       	breq	.+68     	; 0x64c <GPIO_ToggPin+0x52>
 608:	08 95       	ret
		case PORTA: TOGG_BIT(PORTA_REG, LOC_U8Pin); break;
 60a:	2b b3       	in	r18, 0x1b	; 27
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <GPIO_ToggPin+0x1c>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <GPIO_ToggPin+0x18>
 61a:	82 27       	eor	r24, r18
 61c:	8b bb       	out	0x1b, r24	; 27
 61e:	08 95       	ret
		case PORTB: TOGG_BIT(PORTB_REG, LOC_U8Pin); break;
 620:	28 b3       	in	r18, 0x18	; 24
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <GPIO_ToggPin+0x32>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <GPIO_ToggPin+0x2e>
 630:	82 27       	eor	r24, r18
 632:	88 bb       	out	0x18, r24	; 24
 634:	08 95       	ret
		case PORTC: TOGG_BIT(PORTC_REG, LOC_U8Pin); break;
 636:	25 b3       	in	r18, 0x15	; 21
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <GPIO_ToggPin+0x48>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <GPIO_ToggPin+0x44>
 646:	82 27       	eor	r24, r18
 648:	85 bb       	out	0x15, r24	; 21
 64a:	08 95       	ret
		case PORTD: TOGG_BIT(PORTD_REG, LOC_U8Pin); break;
 64c:	22 b3       	in	r18, 0x12	; 18
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <GPIO_ToggPin+0x5e>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <GPIO_ToggPin+0x5a>
 65c:	82 27       	eor	r24, r18
 65e:	82 bb       	out	0x12, r24	; 18
 660:	08 95       	ret

00000662 <GPIO_GetPinVal>:
 * Outputs: 
 *  - uint8_t LOC_U8Result: the value of the specified pin 
*/
uint8_t GPIO_GetPinVal(uint8_t LOC_U8Port, uint8_t LOC_U8Pin){
	uint8_t LOC_U8Result;
	switch(LOC_U8Port){
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	81 f0       	breq	.+32     	; 0x686 <GPIO_GetPinVal+0x24>
 666:	28 f0       	brcs	.+10     	; 0x672 <GPIO_GetPinVal+0x10>
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	b9 f0       	breq	.+46     	; 0x69a <GPIO_GetPinVal+0x38>
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	f9 f0       	breq	.+62     	; 0x6ae <GPIO_GetPinVal+0x4c>
 670:	27 c0       	rjmp	.+78     	; 0x6c0 <GPIO_GetPinVal+0x5e>
		case PORTA: LOC_U8Result = GET_BIT(PORTA_REG, LOC_U8Pin); break;
 672:	8b b3       	in	r24, 0x1b	; 27
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <GPIO_GetPinVal+0x1a>
 678:	95 95       	asr	r25
 67a:	87 95       	ror	r24
 67c:	6a 95       	dec	r22
 67e:	e2 f7       	brpl	.-8      	; 0x678 <GPIO_GetPinVal+0x16>
 680:	98 2f       	mov	r25, r24
 682:	91 70       	andi	r25, 0x01	; 1
 684:	1d c0       	rjmp	.+58     	; 0x6c0 <GPIO_GetPinVal+0x5e>
		case PORTB: LOC_U8Result = GET_BIT(PORTB_REG, LOC_U8Pin); break;
 686:	88 b3       	in	r24, 0x18	; 24
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <GPIO_GetPinVal+0x2e>
 68c:	95 95       	asr	r25
 68e:	87 95       	ror	r24
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <GPIO_GetPinVal+0x2a>
 694:	98 2f       	mov	r25, r24
 696:	91 70       	andi	r25, 0x01	; 1
 698:	13 c0       	rjmp	.+38     	; 0x6c0 <GPIO_GetPinVal+0x5e>
		case PORTC: LOC_U8Result = GET_BIT(PORTC_REG, LOC_U8Pin); break;
 69a:	85 b3       	in	r24, 0x15	; 21
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <GPIO_GetPinVal+0x42>
 6a0:	95 95       	asr	r25
 6a2:	87 95       	ror	r24
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <GPIO_GetPinVal+0x3e>
 6a8:	98 2f       	mov	r25, r24
 6aa:	91 70       	andi	r25, 0x01	; 1
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <GPIO_GetPinVal+0x5e>
		case PORTD: LOC_U8Result = GET_BIT(PORTD_REG, LOC_U8Pin); break;
 6ae:	82 b3       	in	r24, 0x12	; 18
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <GPIO_GetPinVal+0x56>
 6b4:	95 95       	asr	r25
 6b6:	87 95       	ror	r24
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <GPIO_GetPinVal+0x52>
 6bc:	98 2f       	mov	r25, r24
 6be:	91 70       	andi	r25, 0x01	; 1
	}
	return LOC_U8Result;
 6c0:	89 2f       	mov	r24, r25
 6c2:	08 95       	ret

000006c4 <TMR0_InitNormalMode>:
 * overflow number, mode and prescaler.
 * The function sets the waveform generation mode bits in TCCR0 register according to the mode in the config struct.
 * Returns: void
 */
void TMR0_InitNormalMode(ST_TimerConfig_t* config){
    switch(config->mode){
 6c4:	fc 01       	movw	r30, r24
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	81 11       	cpse	r24, r1
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <TMR0_InitNormalMode+0x14>
		case TMR_NORMAL:
			CLR_BIT(TCCR0, WGM00);
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	8f 7b       	andi	r24, 0xBF	; 191
 6d0:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0, WGM01);
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	83 bf       	out	0x33, r24	; 51
 6d8:	08 95       	ret

000006da <TMR0_Start>:
 * overflow number, mode and prescaler.
 * The function sets the initial value of TCNT0, and the prescaler bits in TCCR0 register according to the prescaler in the config struct.
 * Returns: void
 */
void TMR0_Start(ST_TimerConfig_t* config){
	TCNT0 = config->initVal;
 6da:	fc 01       	movw	r30, r24
 6dc:	20 81       	ld	r18, Z
 6de:	22 bf       	out	0x32, r18	; 50
    switch(config->prescaler){
 6e0:	83 81       	ldd	r24, Z+3	; 0x03
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	f9 f0       	breq	.+62     	; 0x724 <TMR0_Start+0x4a>
 6e6:	28 f4       	brcc	.+10     	; 0x6f2 <TMR0_Start+0x18>
 6e8:	88 23       	and	r24, r24
 6ea:	41 f0       	breq	.+16     	; 0x6fc <TMR0_Start+0x22>
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	81 f0       	breq	.+32     	; 0x710 <TMR0_Start+0x36>
 6f0:	08 95       	ret
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	09 f1       	breq	.+66     	; 0x738 <TMR0_Start+0x5e>
 6f6:	84 30       	cpi	r24, 0x04	; 4
 6f8:	49 f1       	breq	.+82     	; 0x74c <TMR0_Start+0x72>
 6fa:	08 95       	ret
        case TMR0_NO_PRE: 
            SET_BIT(TCCR0, CS00);
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 702:	83 b7       	in	r24, 0x33	; 51
 704:	8d 7f       	andi	r24, 0xFD	; 253
 706:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	83 bf       	out	0x33, r24	; 51
            break;
 70e:	08 95       	ret

        case TMR0_PRE_8: 
            CLR_BIT(TCCR0, CS00);
 710:	83 b7       	in	r24, 0x33	; 51
 712:	8e 7f       	andi	r24, 0xFE	; 254
 714:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 716:	83 b7       	in	r24, 0x33	; 51
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 71c:	83 b7       	in	r24, 0x33	; 51
 71e:	8b 7f       	andi	r24, 0xFB	; 251
 720:	83 bf       	out	0x33, r24	; 51
            break;
 722:	08 95       	ret

        case TMR0_PRE_64: 
            SET_BIT(TCCR0, CS00);
 724:	83 b7       	in	r24, 0x33	; 51
 726:	81 60       	ori	r24, 0x01	; 1
 728:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS01);
 72a:	83 b7       	in	r24, 0x33	; 51
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS02);
 730:	83 b7       	in	r24, 0x33	; 51
 732:	8b 7f       	andi	r24, 0xFB	; 251
 734:	83 bf       	out	0x33, r24	; 51
            break;
 736:	08 95       	ret

        case TMR0_PRE_256: 
            CLR_BIT(TCCR0, CS00);
 738:	83 b7       	in	r24, 0x33	; 51
 73a:	8e 7f       	andi	r24, 0xFE	; 254
 73c:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 73e:	83 b7       	in	r24, 0x33	; 51
 740:	8d 7f       	andi	r24, 0xFD	; 253
 742:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 744:	83 b7       	in	r24, 0x33	; 51
 746:	84 60       	ori	r24, 0x04	; 4
 748:	83 bf       	out	0x33, r24	; 51
            break;
 74a:	08 95       	ret

        case TMR0_PRE_1024: 
            SET_BIT(TCCR0, CS00);
 74c:	83 b7       	in	r24, 0x33	; 51
 74e:	81 60       	ori	r24, 0x01	; 1
 750:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, CS01);
 752:	83 b7       	in	r24, 0x33	; 51
 754:	8d 7f       	andi	r24, 0xFD	; 253
 756:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, CS02);
 758:	83 b7       	in	r24, 0x33	; 51
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	83 bf       	out	0x33, r24	; 51
 75e:	08 95       	ret

00000760 <TMR0_Stop>:
 * Description: This function is responsible for stopping the Timer0 module.
 * It sets all the bits in the TCCR0 register to 0, effectively stopping the timer.
 * Returns: void
 */
void TMR0_Stop(void){
	TCCR0 = 0x00; // stop TIMER0
 760:	13 be       	out	0x33, r1	; 51
 762:	08 95       	ret

00000764 <TMR0_GetState>:
 *Description: This function is responsible for getting the state of the Timer0 overflow flag.
 *It reads the TOV0 bit in the TIFR register and returns its value.
 *Returns: uint8_t (1 if overflow occurred, 0 if no overflow)
 */
uint8_t TMR0_GetState(void){
    return GET_BIT(TIFR,TOV0);
 764:	88 b7       	in	r24, 0x38	; 56
}
 766:	81 70       	andi	r24, 0x01	; 1
 768:	08 95       	ret

0000076a <TMR0_Delay>:
 * The function starts the timer and waits for the number of overflows specified in the config struct.
 * After each overflow, it clears the overflow flag.
 * It stops the timer after the specified number of overflows.
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
 76a:	0f 93       	push	r16
 76c:	1f 93       	push	r17
 76e:	cf 93       	push	r28
 770:	8c 01       	movw	r16, r24
	TMR0_Start(config);
 772:	0e 94 6d 03 	call	0x6da	; 0x6da <TMR0_Start>
	uint8_t overflowCount = 0;
 776:	c0 e0       	ldi	r28, 0x00	; 0
	while(overflowCount < config->overflowNum){
 778:	08 c0       	rjmp	.+16     	; 0x78a <TMR0_Delay+0x20>
		while(!TMR0_GetState());
 77a:	0e 94 b2 03 	call	0x764	; 0x764 <TMR0_GetState>
 77e:	88 23       	and	r24, r24
 780:	e1 f3       	breq	.-8      	; 0x77a <TMR0_Delay+0x10>
		SET_BIT(TIFR, TOV0); // clear overflow flag
 782:	88 b7       	in	r24, 0x38	; 56
 784:	81 60       	ori	r24, 0x01	; 1
 786:	88 bf       	out	0x38, r24	; 56
		overflowCount++;
 788:	cf 5f       	subi	r28, 0xFF	; 255
 * Returns: void
 */
void TMR0_Delay(ST_TimerConfig_t* config){
	TMR0_Start(config);
	uint8_t overflowCount = 0;
	while(overflowCount < config->overflowNum){
 78a:	f8 01       	movw	r30, r16
 78c:	81 81       	ldd	r24, Z+1	; 0x01
 78e:	c8 17       	cp	r28, r24
 790:	a0 f3       	brcs	.-24     	; 0x77a <TMR0_Delay+0x10>
		while(!TMR0_GetState());
		SET_BIT(TIFR, TOV0); // clear overflow flag
		overflowCount++;
	}
	TMR0_Stop();
 792:	0e 94 b0 03 	call	0x760	; 0x760 <TMR0_Stop>
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	08 95       	ret

0000079e <__vector_2>:
		TMR0_Delay(&timerConfig_5sec);
		flag = 0;
	}
}

ISR(EXTI1){
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	8f 93       	push	r24
	flag = 1;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 7b0:	8f 91       	pop	r24
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
